{"version":3,"sources":["../src/lib/Wizard.tsx"],"names":["React","Wizard","props","next","setState","state","length","index","prev","children","restProps","nextProps","hasOwnProperty","PureComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAA+B,OAA/B;;IAaqBC,M;;;;;AAOjB,kBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,gFAAMA,KAAN;;AADc,UAYlBC,IAZkB,GAYX;AAAA,aAAM,MAAKC,QAAL,CAAc,UAAAC,KAAK,EAAI;AAChC,YAAG,MAAKH,KAAL,CAAWI,MAAX,IAAqBD,KAAK,CAACE,KAAN,GAAc,CAAd,IAAmB,MAAKL,KAAL,CAAWI,MAAtD,EAA8D,OAAOD,KAAP;AAC9D,eAAO;AAACE,UAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,GAAc;AAAtB,SAAP;AACH,OAHY,CAAN;AAAA,KAZW;;AAAA,UAgBlBC,IAhBkB,GAgBX;AAAA,aAAM,MAAKJ,QAAL,CAAc,UAAAC,KAAK,EAAI;AAChC,YAAGA,KAAK,CAACE,KAAN,GAAc,CAAd,GAAkB,CAArB,EAAwB,OAAOF,KAAP;AACxB,eAAO;AAACE,UAAAA,KAAK,EAAEF,KAAK,CAACE,KAAN,GAAc;AAAtB,SAAP;AACH,OAHY,CAAN;AAAA,KAhBW;;AAEd,UAAKF,KAAL,GAAa;AAACE,MAAAA,KAAK,EAAEL,KAAK,CAACK,KAAN,IAAe;AAAvB,KAAb;AAFc;AAGjB;;;;6BAkBO;AAAA,wBAC6B,KAAKL,KADlC;AAAA,UACGO,QADH,eACGA,QADH;AAAA,UACgBC,SADhB;;AAGJ,aACI,2BAASA,SAAT,EACKD,QAAQ,CAAC,KAAKJ,KAAL,CAAWE,KAAZ,EAAmB,KAAKJ,IAAxB,EAA8B,KAAKK,IAAnC,CADb,CADJ;AAKH;;;6CAxB+BG,S,EAAU;AACtC,UAAGA,SAAS,CAACC,cAAV,CAAyB,OAAzB,CAAH,EAAqC;AACjC,eAAO;AAACL,UAAAA,KAAK,EAAEI,SAAS,CAACJ;AAAlB,SAAP;AACH;;AACD,aAAO,IAAP;AACH;;;;EAjB+BP,KAAK,CAACa,a;;SAArBZ,M","sourcesContent":["import React, {HTMLProps} from 'react'\nimport PropTypes from 'prop-types'\n\ntype Props = {\n    children: (tabIndex: number, next: () => void, prev: () => void) => React.ReactNode\n    index?: number\n    length?: number\n} & HTMLProps<HTMLDivElement>\n\ntype State = {\n    index: number\n}\n\nexport default class Wizard extends React.PureComponent<Props, State>{\n    static propTypes = {\n        children: PropTypes.func.isRequired,\n        index: PropTypes.number,\n        length: PropTypes.number\n    }\n\n    constructor(props){\n        super(props)\n        this.state = {index: props.index || 0}\n    }\n\n    static getDerivedStateFromProps(nextProps){\n        if(nextProps.hasOwnProperty('index')){\n            return {index: nextProps.index}\n        }\n        return null\n    }\n\n    next = () => this.setState(state => {\n        if(this.props.length && state.index + 1 >= this.props.length) return state\n        return {index: state.index + 1}\n    })\n    prev = () => this.setState(state => {\n        if(state.index - 1 < 0) return state\n        return {index: state.index - 1}\n    })\n\n    render(){\n        const {children, ...restProps} = this.props\n\n        return (\n            <div {...restProps}>\n                {children(this.state.index, this.next, this.prev)}\n            </div>\n        )\n    }\n}"],"file":"Wizard.js"}