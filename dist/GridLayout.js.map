{"version":3,"sources":["../src/lib/GridLayout.tsx"],"names":["React","isEqual","Paper","RGL","WidthProvider","ReactGridLayout","BackgroundPaper","backgroundColor","props","GridItemContainer","styled","gridItemWidthNumberMap","numberGridItemWithMap","toGridItemWidth","w","undefined","Math","min","trunc","toGridItemHeight","gridItemPositionToLayout","position","i","id","x","col","y","row","h","height","width","minH","minHeight","minW","minWidth","maxH","maxHeight","maxW","maxWidth","isDraggable","draggable","isResizable","resizable","static","layoutToGridItemPosition","layout","GridLayout","_layoutWasChangedWorkaround","onLayoutChange","layouts","map","validateItemLayout","process","env","NODE_ENV","items","Set","item","forEach","has","console","error","warn","onDragResizeStop","oldItem","newItem","margin","rglLayout","Object","values","children","PureComponent","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components/macro'\nimport isEqual from 'lodash/isEqual'\n\nimport Paper, {PaperProps} from '@material-ui/core/Paper'\n\nimport RGL, {Layout, WidthProvider} from 'react-grid-layout/'\nimport 'react-grid-layout/css/styles.css'\nimport 'react-resizable/css/styles.css'\n\nconst ReactGridLayout = WidthProvider(RGL)\n\nconst BackgroundPaper = ({backgroundColor, ...props}: { backgroundColor: string } & PaperProps) => (<Paper {...props} />)\nconst GridItemContainer = styled(BackgroundPaper)`&&{\n    background-color: ${({backgroundColor}) => backgroundColor};\n    width: 100%;\n    height: 100%;\n}`\n\ntype GridItemWidth = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 'onequarter' | 'onethird' | 'half' | 'twothirds' | 'threequarters' | 'full'\ntype GridItemHeight = number\nconst gridItemWidths = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 'onequarter', 'onethird', 'half', 'twothirds', 'threequarters', 'full']\nconst gridItemWidthNumberMap: {[P in GridItemWidth]: number} = {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12, 'onequarter': 3, 'onethird': 4, 'half': 6, 'twothirds': 8, 'threequarters': 9, 'full': 12}\nconst numberGridItemWithMap: {[n: number]: GridItemWidth} = {1: 1, 2: 2, 3: 'onequarter', 4: 'onethird', 5: 5, 6: 'half', 7: 7, 8: 'twothirds', 9: 'threequarters', 10: 10, 11: 11, 12: 'full'}\n\nconst toGridItemWidth = (w?: number): GridItemWidth | undefined => w === undefined ? undefined : numberGridItemWithMap[Math.min(6, Math.trunc(w))]\nconst toGridItemHeight = (w?: number): GridItemHeight | undefined => w === undefined ? undefined : Math.min(12, Math.trunc(w)) as GridItemHeight\n\nconst gridItemPositionToLayout = (position: GridItemPosition): Layout => ({\n    i: position.id,\n    x: position.col,\n    y: position.row,\n    h: position.height,\n    w: gridItemWidthNumberMap[position.width],\n    minH: position.minHeight,\n    minW: position.minWidth && gridItemWidthNumberMap[position.minWidth] || undefined,\n    maxH: position.maxHeight,\n    maxW: position.maxWidth && gridItemWidthNumberMap[position.maxWidth] || undefined,\n    isDraggable: position.draggable !== undefined ? position.draggable : false,\n    isResizable: position.resizable !== undefined ? position.resizable : false,\n    static: position.static,\n})\n\nconst layoutToGridItemPosition = (layout: Layout): GridItemPosition => ({\n    id: layout.i!,\n    col: layout.x,\n    row: layout.y,\n    width: toGridItemWidth(layout.w)!,\n    height: toGridItemHeight(layout.h)!,\n    minHeight: toGridItemHeight(layout.minH),\n    minWidth: toGridItemWidth(layout.minW),\n    maxHeight: toGridItemHeight(layout.maxH),\n    maxWidth: toGridItemWidth(layout.maxW),\n    draggable: layout.isDraggable,\n    resizable: layout.isResizable,\n    static: layout.static,\n})\n\nexport type GridItem = {\n    id: string\n    backgroundColor?: string\n    children: React.ReactNode\n}\n\nexport type GridItemPosition = {\n    id: string\n    col: number\n    row: number\n    width: GridItemWidth\n    height: GridItemHeight\n    minWidth?: GridItemWidth\n    minHeight?: GridItemHeight\n    maxWidth?: GridItemWidth\n    maxHeight?: GridItemHeight\n    draggable?: boolean\n    resizable?: boolean\n    static?: boolean\n}\n\nexport type GridLayoutProps = {\n    items: Array<GridItem>\n    layout: Array<GridItemPosition>\n    /**\n     * @default 16\n     */\n    margin?: number\n    onLayoutChange?: (layout: Array<GridItemPosition>) => void\n    children?: undefined\n}\n\nexport default class GridLayout extends React.PureComponent<GridLayoutProps>{\n    static defaultProps: Partial<GridLayoutProps> = {\n        margin: 16,\n    }\n\n    static propTypes = {\n        margin: PropTypes.number,\n        onLayoutChange: PropTypes.func,\n        items: PropTypes.arrayOf(PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            backgroundColor: PropTypes.string,\n            children: PropTypes.node.isRequired\n        })).isRequired,\n        layout: PropTypes.arrayOf(PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            col: PropTypes.number.isRequired,\n            row: PropTypes.number.isRequired,\n            width: PropTypes.oneOf(gridItemWidths).isRequired,\n            height: PropTypes.number.isRequired,\n            minWidth: PropTypes.oneOf(gridItemWidths),\n            minHeight: PropTypes.number,\n            maxWidth: PropTypes.oneOf(gridItemWidths),\n            maxHeight: PropTypes.number,\n            draggable: PropTypes.bool,\n            resizable: PropTypes.bool,\n            static: PropTypes.bool,\n        })).isRequired\n    }\n\n    _layoutWasChangedWorkaround = false\n\n    componentDidMount(){\n        this.validateItemLayout()\n    }\n\n    onLayoutChange = (layouts: Array<Layout>) => {\n        const {onLayoutChange} = this.props\n        onLayoutChange &&\n            this._layoutWasChangedWorkaround &&\n            onLayoutChange(layouts.map(layoutToGridItemPosition))\n        this._layoutWasChangedWorkaround = false\n    }\n\n    validateItemLayout = () => {\n        if(process.env.NODE_ENV === 'production') return\n\n        const items = new Set(this.props.items.map(item => item.id))\n        const layouts = new Set(this.props.layout.map(layout => layout.id))\n\n        items.forEach(item => {\n            if(!layouts.has(item)){\n                console.error(`Error: Item with id: ${item} is missing layout`)\n            }\n        })\n\n        layouts.forEach(layout => {\n            if(!items.has(layout)){\n                console.warn(`Warning: Layout with id: ${layout} does not correspond to any item`)\n            }\n        })\n    }\n\n    onDragResizeStop = (layout: Layout[], oldItem: Layout, newItem: Layout) => {\n        this._layoutWasChangedWorkaround = !isEqual(oldItem, newItem)\n    }\n\n    render(){\n        const {items, layout, margin = 16} = this.props\n        const rglLayout = Object.values(layout).map(gridItemPositionToLayout)\n\n        return (\n            <ReactGridLayout\n                className='layout'\n                cols={12}\n                rowHeight={90}\n                layout={rglLayout}\n                compactType={'vertical'}\n                margin={[margin, margin]}\n                containerPadding={[0, 0]}\n                autoSize\n                measureBeforeMount\n                useCSSTransforms\n                preventCollision={false}\n                onLayoutChange={this.onLayoutChange}\n                onResizeStop={this.onDragResizeStop}\n                onDragStop={this.onDragResizeStop}\n            >\n                {items.map(({id, backgroundColor, children}) => (\n                    <GridItemContainer\n                        key={id}\n                        backgroundColor={backgroundColor || 'inherit'}\n                    >\n                        {children}\n                    </GridItemContainer>))\n                }\n            </ReactGridLayout>\n        )\n    }\n}"],"file":"GridLayout.js"}