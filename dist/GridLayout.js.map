{"version":3,"sources":["../src/lib/GridLayout.tsx"],"names":["React","ResponsiveGridLayout","useWidth","materialuiTheme","cols","xl","lg","md","sm","xs","Board","props","ref","useRef","width","current","items","layout","margin","draggable","onLayoutChange","breakpoints","values","map","id","children"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,OAAOC,oBAAP,MAA8D,mCAA9D;AACA,SAAQC,QAAR,QAAuB,uBAAvB;AAEA,SAAQC,eAAR,QAA8B,SAA9B;AAuDA,IAAMC,IAAuC,GAAG;AAC5CC,EAAAA,EAAE,EAAE,EADwC;AAE5CC,EAAAA,EAAE,EAAE,EAFwC;AAG5CC,EAAAA,EAAE,EAAE,CAHwC;AAI5CC,EAAAA,EAAE,EAAE,CAJwC;AAK5CC,EAAAA,EAAE,EAAE;AALwC,CAAhD;AAQA,eAAe,SAASC,KAAT,CAAeC,KAAf,EAAsC;AACjD,MAAMC,GAAG,GAAGZ,KAAK,CAACa,MAAN,CAAmC,IAAnC,CAAZ;AACA,MAAMC,KAAK,GAAGZ,QAAQ,CAACU,GAAG,CAACG,OAAL,CAAtB;AAFiD,MAI1CC,KAJ0C,GAIeL,KAJf,CAI1CK,KAJ0C;AAAA,MAInCC,MAJmC,GAIeN,KAJf,CAInCM,MAJmC;AAAA,sBAIeN,KAJf,CAI3BO,MAJ2B;AAAA,MAI3BA,MAJ2B,8BAIlB,EAJkB;AAAA,MAIdC,SAJc,GAIeR,KAJf,CAIdQ,SAJc;AAAA,MAIHC,cAJG,GAIeT,KAJf,CAIHS,cAJG,EAMjD;AACA;AACA;AACA;;AAEA,SACI,oBAAC,oBAAD;AACI,IAAA,GAAG,EAAER,GADT;AAEI,IAAA,KAAK,EAAEE,KAFX;AAGI,IAAA,SAAS,EAAC,QAHd;AAII,IAAA,IAAI,EAAEV,IAJV;AAKI,IAAA,SAAS,EAAE,EALf;AAMI,IAAA,OAAO,EAAEa,MANb;AAOI,IAAA,WAAW,EAAEd,eAAe,CAACkB,WAAhB,CAA4BC,MAP7C;AAQI,IAAA,MAAM,EAAE,CAACJ,MAAD,EAASA,MAAT,CARZ;AASI,IAAA,gBAAgB,EAAE,CAAC,CAAD,EAAI,CAAJ,CATtB;AAUI,IAAA,cAAc,EAAEE,cAVpB,CAUoC;AAVpC;AAWI,IAAA,SAAS,EAAED;AAXf,KAaK;AACGH,EAAAA,KAAK,CAACO,GAAN,CAAU;AAAA,QAAEC,EAAF,QAAEA,EAAF;AAAA,QAAMC,QAAN,QAAMA,QAAN;AAAA,WACN;AAAK,MAAA,GAAG,EAAED;AAAV,OACKC,QADL,CADM;AAAA,GAAV,CAdR,CADJ;AAsBH,C,CAED;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react'\n\nimport PropTypes from 'prop-types'\n\nimport ResponsiveGridLayout, {ResponsiveGridLayoutProps} from './GridLayout/ResponsiveGridLayout'\nimport {useWidth} from './GridLayout/useWidth'\nimport {LayoutItem, Layout} from './GridLayout/utils'\nimport {materialuiTheme} from './theme'\nimport {ResponsiveLayout} from './GridLayout/responsiveUtils'\nimport {Breakpoint} from '@material-ui/core/styles/createBreakpoints'\n\n// type GridItemWidth = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 'onequarter' | 'onethird' | 'half' | 'twothirds' | 'threequarters' | 'full'\n// type GridItemHeight = number\n// const gridItemWidths = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 'onequarter', 'onethird', 'half', 'twothirds', 'threequarters', 'full']\n// const gridItemWidthNumberMap: {[P in GridItemWidth]: number} = {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12, 'onequarter': 3, 'onethird': 4, 'half': 6, 'twothirds': 8, 'threequarters': 9, 'full': 12}\n// const numberGridItemWithMap: {[n: number]: GridItemWidth} = {1: 1, 2: 2, 3: 'onequarter', 4: 'onethird', 5: 5, 6: 'half', 7: 7, 8: 'twothirds', 9: 'threequarters', 10: 10, 11: 11, 12: 'full'}\n\n// const toGridItemWidth = (w?: number): GridItemWidth | undefined => w === undefined ? undefined : numberGridItemWithMap[Math.min(12, Math.trunc(w))]\n// const toGridItemHeight = (w?: number): GridItemHeight | undefined => w === undefined ? undefined : Math.min(12, Math.trunc(w)) as GridItemHeight\n\n// const gridItemPositionToLayout = (position: GridItemPosition): LayoutItem => ({\n//     id: position.id,\n//     col: position.col,\n//     row: position.row,\n//     height: position.height,\n//     width: gridItemWidthNumberMap[position.width],\n//     // draggable: true\n// })\n\n// const layoutToGridItemPosition = (layout: LayoutItem): GridItemPosition => ({\n//     id: layout.id!,\n//     col: layout.col,\n//     row: layout.row,\n//     width: toGridItemWidth(layout.width)!,\n//     height: toGridItemHeight(layout.height)!\n// })\n\nexport type GridItem = {\n    id: string\n    children: React.ReactNode\n}\n\nexport type GridItemPosition = {\n    id: string\n    col: number\n    row: number\n    width: number // GridItemWidth\n    height: number // GridItemHeight\n}\n\nexport type GridLayoutProps = {\n    items: Array<GridItem>\n    draggable?: boolean\n    layout: ResponsiveLayout // Array<GridItemPosition>\n    /**\n     * @default 16\n     */\n    margin?: number\n    onLayoutChange?: (layout: Layout, breakpoint: Breakpoint, responsiveLayout: ResponsiveLayout) => void\n    children?: undefined\n}\n\nconst cols: ResponsiveGridLayoutProps['cols'] = {\n    xl: 12,\n    lg: 12,\n    md: 6,\n    sm: 6,\n    xs: 4\n}\n\nexport default function Board(props: GridLayoutProps){\n    const ref = React.useRef<ResponsiveGridLayout>(null)\n    const width = useWidth(ref.current)\n\n    const {items, layout, margin = 16, draggable, onLayoutChange} = props\n\n    // const handleLayoutChange = React.useCallback((layout: Layout, breakpoint: Breakpoint, layouts: ResponsiveLayout) => {\n    //     console.log(layouts)\n    //     onLayoutChange && onLayoutChange(layout, breakpoint, layouts)\n    // }, [props])\n\n    return (\n        <ResponsiveGridLayout\n            ref={ref}\n            width={width}\n            className='layout'\n            cols={cols}\n            rowHeight={90}\n            layouts={layout}\n            breakpoints={materialuiTheme.breakpoints.values}\n            margin={[margin, margin]}\n            containerPadding={[0, 0]}\n            onLayoutChange={onLayoutChange} // handleLayoutChange\n            draggable={draggable}\n        >\n            {// TODO: Perhaps cloning items and adding key is better, or, requiring key ? hmm\n                items.map(({id, children}) => (\n                    <div key={id}>\n                        {children}\n                    </div>))\n            }\n        </ResponsiveGridLayout>\n    )\n}\n\n// export default class GridLayout extends React.PureComponent<GridLayoutProps>{\n//     static defaultProps: Partial<GridLayoutProps> = {\n//         margin: 16,\n//     }\n\n//     static propTypes = {\n//         margin: PropTypes.number,\n//         draggable: PropTypes.bool,\n//         onLayoutChange: PropTypes.func,\n//         items: PropTypes.arrayOf(PropTypes.shape({\n//             id: PropTypes.string.isRequired,\n//             backgroundColor: PropTypes.string,\n//             children: PropTypes.node.isRequired\n//         })).isRequired,\n//         layout: PropTypes.arrayOf(PropTypes.shape({\n//             id: PropTypes.string.isRequired,\n//             col: PropTypes.number.isRequired,\n//             row: PropTypes.number.isRequired,\n//             width: PropTypes.oneOf(gridItemWidths).isRequired,\n//             height: PropTypes.number.isRequired,\n//         })).isRequired\n//     }\n\n//     componentDidMount(){\n//         this.validateItemLayout()\n//     }\n\n//     onLayoutChange = (layouts: Layout) => {\n//         const {onLayoutChange} = this.props\n//         onLayoutChange && onLayoutChange(Object.values(layouts).map(layoutToGridItemPosition))\n//     }\n\n//     validateItemLayout = () => {\n//         if(process.env.NODE_ENV === 'production') return\n\n//         const items = new Set(this.props.items.map(item => item.id))\n//         const layouts = new Set(this.props.layout.map(layout => layout.id))\n\n//         items.forEach(item => {\n//             if(!layouts.has(item)){\n//                 console.error(`Error: Item with id: ${item} is missing layout`)\n//             }\n//         })\n\n//         layouts.forEach(layout => {\n//             if(!items.has(layout)){\n//                 console.warn(`Warning: Layout with id: ${layout} does not correspond to any item`)\n//             }\n//         })\n//     }\n\n//     render(){\n//         const {items, layout, margin = 16, draggable} = this.props\n//         const rglLayout = layout\n//             .map(gridItemPositionToLayout)\n//             .reduce((l, item) => {\n//                 l[item.id] = item\n//                 return l\n//             }, {})\n//         const cols: ResponsiveGridLayoutProps['cols'] = {\n//             xl: 12,\n//             lg: 12,\n//             md: 6,\n//             sm: 6,\n//             xs: 4\n//         }\n\n//         return (\n//             <ResponsiveGridLayout\n//                 className='layout'\n//                 cols={cols}\n//                 rowHeight={90}\n//                 layouts={{lg: rglLayout}}\n//                 breakpoints={materialuiTheme.breakpoints.values}\n//                 margin={[margin, margin]}\n//                 containerPadding={[0, 0]}\n//                 onLayoutChange={this.onLayoutChange}\n//                 draggable={draggable}\n//             >\n//                 {// TODO: Perhaps cloning items and adding key is better, or, requiring key ? hmm\n//                     items.map(({id, children}) => (\n//                         <div key={id}>\n//                             {children}\n//                         </div>))\n//                 }\n//             </ResponsiveGridLayout>\n//         )\n//     }\n// }"],"file":"GridLayout.js"}