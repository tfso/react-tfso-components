{"version":3,"sources":["../src/lib/GridLayout.tsx"],"names":["React","Paper","ReactGridLayout","styledTheme","isEqual","BackgroundPaper","backgroundColor","props","GridItemContainer","styled","gridItemWidthNumberMap","numberGridItemWithMap","toGridItemWidth","w","undefined","Math","min","trunc","toGridItemHeight","gridItemPositionToLayout","position","i","id","x","col","y","row","h","height","width","minH","minHeight","minW","minWidth","maxH","maxHeight","maxW","maxWidth","isDraggable","draggable","isResizable","resizable","static","layoutToGridItemPosition","layout","GridLayout","_layoutWasChangedWorkaround","onLayoutChange","layouts","map","validateItemLayout","process","env","NODE_ENV","items","Set","item","forEach","has","console","error","warn","onResize","oldItem","newItem","placeHolder","onDragStop","onResizeStop","margin","other","rglLayout","Object","values","mui","breakpoints","lg","children","PureComponent","defaultProps","compactType"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components/macro'\n\nimport Paper, {PaperProps} from '@material-ui/core/Paper'\n\nimport ReactGridLayout, {Layout, ReactGridLayoutProps} from 'react-grid-layout/'\nimport 'react-grid-layout/css/styles.css'\nimport 'react-resizable/css/styles.css'\nimport {styledTheme} from './theme'\nimport isEqual from 'lodash/isEqual'\n\nconst BackgroundPaper = ({backgroundColor, ...props}: { backgroundColor: string } & PaperProps) => (<Paper {...props} />)\nconst GridItemContainer = styled(BackgroundPaper)`&&{\n    background-color: ${({backgroundColor}) => backgroundColor};\n    width: 100%;\n    height: 100%;\n}`\n\ntype GridItemWidth = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 'onequarter' | 'onethird' | 'half' | 'twothirds' | 'threequarters' | 'full'\ntype GridItemHeight = 1 | 2 | 3 | 4 | 5 | 6\nconst gridItemWidths = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 'onequarter', 'onethird', 'half', 'twothirds', 'threequarters', 'full']\nconst gridItemHeights = [1, 2, 3, 4, 5, 6]\nconst gridItemWidthNumberMap: {[P in GridItemWidth]: number} = {\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9,\n    10: 10,\n    11: 11,\n    12: 12,\n    'onequarter': 3,\n    'onethird': 4,\n    'half': 6,\n    'twothirds': 8,\n    'threequarters': 9,\n    'full': 12,\n}\n\nconst numberGridItemWithMap: {[n: number]: GridItemWidth} = {\n    1: 1,\n    2: 2,\n    3: 'onequarter',\n    4: 'onethird',\n    5: 5,\n    6: 'half',\n    7: 7,\n    8: 'twothirds',\n    9: 'threequarters',\n    10: 10,\n    11: 11,\n    12: 'full',\n}\n\nconst toGridItemWidth = (w?: number): GridItemWidth | undefined => {\n    return w === undefined\n        ? undefined\n        : numberGridItemWithMap[Math.min(6, Math.trunc(w))]\n}\n\nconst toGridItemHeight = (w?: number): GridItemHeight | undefined => {\n    return w === undefined\n        ? undefined\n        : Math.min(12, Math.trunc(w)) as GridItemHeight\n}\n\nconst gridItemPositionToLayout = (position: GridItemPosition): Layout => {\n    return {\n        i: position.id,\n        x: position.col,\n        y: position.row,\n        h: position.height,\n        w: gridItemWidthNumberMap[position.width],\n        minH: position.minHeight,\n        minW: position.minWidth && gridItemWidthNumberMap[position.minWidth] || undefined,\n        maxH: position.maxHeight,\n        maxW: position.maxWidth && gridItemWidthNumberMap[position.maxWidth] || undefined,\n        isDraggable: position.draggable !== undefined ? position.draggable : false,\n        isResizable: position.resizable !== undefined ? position.resizable : false,\n        static: position.static,\n    }\n}\n\nconst layoutToGridItemPosition = (layout: Layout): GridItemPosition => {\n    return {\n        id: layout.i!,\n        col: layout.x,\n        row: layout.y,\n        width: toGridItemWidth(layout.w)!,\n        height: toGridItemHeight(layout.h)!,\n        minHeight: toGridItemHeight(layout.minH),\n        minWidth: toGridItemWidth(layout.minW),\n        maxHeight: toGridItemHeight(layout.maxH),\n        maxWidth: toGridItemWidth(layout.maxW),\n        draggable: layout.isDraggable,\n        resizable: layout.isResizable,\n        static: layout.static,\n    }\n}\n\nexport type GridItem = {\n    id: string\n    backgroundColor?: string\n    children: React.ReactNode\n}\n\ntype GridItemPosition = {\n    id: string\n    col: number\n    row: number\n    width: GridItemWidth\n    height: GridItemHeight\n    minWidth?: GridItemWidth\n    minHeight?: GridItemHeight\n    maxWidth?: GridItemWidth\n    maxHeight?: GridItemHeight\n    /**\n     * @default false\n     */\n    draggable?: boolean\n    /**\n     * @default false\n     */\n    resizable?: boolean\n    /**\n     * @default false\n     */\n    static?: boolean\n}\n\nexport type GridLayoutProps = {\n    items: Array<GridItem>\n    layout: Array<GridItemPosition>\n    /**\n     * @default 16\n     */\n    margin?: number\n    onLayoutChange?: (layout: Array<GridItemPosition>) => void\n    /**\n     * @default vertical\n     */\n    compactType?: ReactGridLayoutProps['compactType']\n    children?: undefined\n}\n\nexport default class GridLayout extends React.PureComponent<GridLayoutProps>{\n    static defaultProps: Partial<GridLayoutProps> = {\n        margin: 16,\n        compactType: 'vertical'\n    }\n\n    static propTypes = {\n        margin: PropTypes.number,\n        onLayoutChange: PropTypes.func,\n        compactType: PropTypes.oneOf(['vertical', 'horizontal', null]),\n        items: PropTypes.arrayOf(PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            backgroundColor: PropTypes.string,\n            children: PropTypes.node.isRequired\n        })).isRequired,\n        layout: PropTypes.arrayOf(PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            col: PropTypes.number.isRequired,\n            row: PropTypes.number.isRequired,\n            width: PropTypes.oneOf(gridItemWidths).isRequired,\n            height: PropTypes.oneOf(gridItemHeights).isRequired,\n            minWidth: PropTypes.oneOf(gridItemWidths),\n            minHeight: PropTypes.oneOf(gridItemHeights),\n            maxWidth: PropTypes.oneOf(gridItemWidths),\n            maxHeight: PropTypes.oneOf(gridItemHeights),\n            draggable: PropTypes.bool,\n            resizable: PropTypes.bool,\n            static: PropTypes.bool,\n        })).isRequired\n    }\n\n    _layoutWasChangedWorkaround = false\n\n    componentDidMount(){\n        this.validateItemLayout()\n    }\n\n    onLayoutChange = (layouts: Array<Layout>) => {\n        const {onLayoutChange} = this.props\n        onLayoutChange &&\n            this._layoutWasChangedWorkaround &&\n            onLayoutChange(layouts.map(layoutToGridItemPosition))\n        this._layoutWasChangedWorkaround = false\n    }\n\n    validateItemLayout = () => {\n        if(process.env.NODE_ENV === 'production') return\n\n        const items = new Set(this.props.items.map(item => item.id))\n        const layouts = new Set(this.props.layout.map(layout => layout.id))\n\n        items.forEach(item => {\n            if(!layouts.has(item)){\n                console.error(`Error: Item with id: ${item} is missing layout`)\n            }\n        })\n\n        layouts.forEach(layout => {\n            if(!items.has(layout)){\n                console.warn(`Warning: Layout with id: ${layout} does not correspond to any item`)\n            }\n        })\n    }\n\n    onResize = (layout: Layout[], oldItem: Layout, newItem: Layout, placeHolder: Layout) => {\n        newItem.h = placeHolder.h = Math.min(6, newItem.h)\n    }\n\n    onDragStop = (layout: Layout[], oldItem: Layout, newItem: Layout, placeHolder: Layout) => {\n        this._layoutWasChangedWorkaround = !isEqual(oldItem, newItem)\n    }\n\n    onResizeStop = (layout: Layout[], oldItem: Layout, newItem: Layout, placeHolder: Layout) => {\n        this._layoutWasChangedWorkaround = !isEqual(oldItem, newItem)\n    }\n\n    render(){\n        const {items, layout, margin = 16, onLayoutChange, ...other} = this.props\n        const rglLayout = Object.values(layout).map(gridItemPositionToLayout)\n\n        return (\n            <ReactGridLayout\n                {...other}\n                className='layout'\n                cols={12}\n                layout={rglLayout}\n                margin={[margin, margin]}\n                rowHeight={90}\n                width={styledTheme.mui.breakpoints.values.lg}\n                onLayoutChange={this.onLayoutChange}\n                onResize={this.onResize}\n                onResizeStop={this.onResizeStop}\n                onDragStop={this.onDragStop}\n            >\n                {items.map(({id, backgroundColor, children}) => (\n                    <GridItemContainer\n                        key={id}\n                        backgroundColor={backgroundColor || 'inherit'}\n                    >\n                        {children}\n                    </GridItemContainer>))}\n            </ReactGridLayout>\n        )\n    }\n}"],"file":"GridLayout.js"}