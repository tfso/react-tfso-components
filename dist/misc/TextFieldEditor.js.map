{"version":3,"sources":["../../src/lib/misc/TextFieldEditor.tsx"],"names":["React","TextField","TextFieldEditor","_inputRef","createRef","state","editing","value","props","prevProps","blur","current","onKeyDown","event","defaultPrevented","ctrlKey","key","handleEvent","setState","multiline","onFocus","e","onBlur","onChange","target","dirtyProp","dirty","onChangeProp","valueProp","enableDirtyCheck","otherProps","isDirty","style","fontStyle","PureComponent","preventDefault","stopPropagation","nativeEvent","stopImmediatePropagation"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport TextField, { TextFieldProps } from '@material-ui/core/TextField'\r\n\r\ntype Props = {\r\n    value: string\r\n    onChange(value: string): void\r\n    dirty?: boolean\r\n    enableDirtyCheck?: boolean\r\n} \r\n\r\ntype State = {\r\n    editing: boolean\r\n    value: string\r\n    prevProps: Props\r\n}\r\n\r\ntype Omit<T,K> = Pick<T, Exclude<keyof T, K>>\r\n\r\nexport type TextFieldEditorProps = Props & Partial<Omit<TextFieldProps, 'value' | 'onChange'>>\r\n\r\nexport default class TextFieldEditor extends React.PureComponent<TextFieldEditorProps, State>{\r\n    static propTypes = {\r\n        value: PropTypes.string.isRequired,\r\n        onChange: PropTypes.func.isRequired,\r\n        dirty: PropTypes.bool\r\n    }\r\n\r\n    _inputRef: React.RefObject<HTMLInputElement> = React.createRef()\r\n\r\n    state: State = {\r\n        editing: false,\r\n        value: this.props.value,\r\n        prevProps: this.props\r\n    }\r\n\r\n    static getDerivedStateFromProps(props: Readonly<TextFieldEditorProps>, state: Readonly<State>){\r\n        const prevProps = state.prevProps\r\n\r\n        if(prevProps.value !== props.value)\r\n            return { value: props.value, prevProps: props }\r\n\r\n        return { prevProps: props }\r\n    }\r\n\r\n    blur = () => { this._inputRef.current && this._inputRef.current.blur() }\r\n\r\n    onKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\r\n        this.props.onKeyDown && this.props.onKeyDown(event)\r\n        if(event.defaultPrevented)\r\n            return \r\n\r\n        if(event.ctrlKey) switch(event.key){\r\n            case 's':\r\n                // this event should not be 'handled' here (eg. invoke handleEvent(event)), control may want to perform other actions on ctrl+s\r\n                // It should behave as a save changes in the control as well however\r\n                this.blur()\r\n                break\r\n            case 'z':\r\n                handleEvent(event)\r\n                this.setState({editing: false, value: this.props.value}, this.blur)\r\n                break\r\n            default: break\r\n        }\r\n        else switch(event.key){\r\n            case 'Enter':\r\n                if(this.props.multiline)\r\n                    break\r\n                handleEvent(event)\r\n                this.blur()\r\n                break\r\n            case 'Escape':\r\n                handleEvent(event)\r\n                this.setState({editing: false, value: this.props.value}, this.blur)\r\n                break\r\n            default: break\r\n        }\r\n    }\r\n\r\n    onFocus = (e: React.EventHandler<any>) => {\r\n        this.setState({editing: true})\r\n        this.props.onFocus && this.props.onFocus(e)\r\n    }\r\n\r\n    onBlur = (e: React.EventHandler<any>) => {\r\n        if(!this.state.editing)\r\n            return // The method should be safe to call multiple times, but we don't want to raise the event multiple times if we dont need to\r\n        \r\n        this.props.onChange(this.state.value)\r\n        this.setState({editing: false })\r\n        this.props.onBlur && this.props.onBlur(e)\r\n    }\r\n\r\n    onChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement | HTMLSelectElement>) => {\r\n        const value = event.target.value\r\n        this.setState({value, editing: true})\r\n    }\r\n\r\n    render(){\r\n        const { dirty: dirtyProp, onChange: onChangeProp, value: valueProp, enableDirtyCheck, ...otherProps} = this.props\r\n        const { value } = this.state\r\n\r\n        const isDirty = enableDirtyCheck ? this.props.value !== value || !!dirtyProp : !!dirtyProp\r\n\r\n        return (\r\n            <TextField \r\n                {...otherProps as any}\r\n                inputRef={this._inputRef}\r\n                value={value}\r\n                onFocus={this.onFocus}\r\n                onChange={this.onChange}\r\n                onBlur={this.onBlur}\r\n                onKeyDown={this.onKeyDown}\r\n                InputProps={{ style: { fontStyle: isDirty ? 'italic' : 'normal' } }}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nfunction handleEvent(event: React.KeyboardEvent<HTMLDivElement>){\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n    // the above only prevents other synthetic events, if we want to prevent global listeners too, we need to stop the propagation on the native event as well\r\n    event.nativeEvent.stopImmediatePropagation()\r\n}"],"file":"TextFieldEditor.js"}