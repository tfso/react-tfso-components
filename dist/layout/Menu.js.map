{"version":3,"sources":["../../src/lib/layout/Menu.tsx"],"names":["React","List","Drawer","Link","Collapse","IconButton","ExpandLess","ExpandMore","ListItemIcon","ListItemText","ListItem","ListItemSecondaryAction","Divider","Typography","Chip","Tooltip","withScreenSize","StyledDrawer","styled","attrs","classes","paper","open","props","theme","mui","zIndex","drawer","tfso","colors","menu","menuItemText","getColor","color","palette","success","alert","loudInfo","warning","ChipWrapper","ChipColor","StyledChip","white","typography","pxToRem","StyledListItemText","Menu","mobile","onClose","paddingBottom","children","PureComponent","MenuContent","ListItemSecondaryText","grayLight","MenuIcon","ListItemWrapper","expanded","MenuGroupListItem","menuExpanded","menuItem","MenuGroupExpandLess","MenuGroupExpandMore","MenuGroup","onToggleExpanded","e","stopPropagation","subtitle","label","Icon","icon","screenSize","style","top","position","disableRipple","display","RootListItem","selected","menuItemSelectedText","MenuRootItem","LinkContent","chipLabel","chipColor","href","NestedListItem","MenuItem","noWrap"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport List from '@material-ui/core/List'\nimport Drawer from '@material-ui/core/Drawer'\nimport Link from '@material-ui/core/Link'\nimport Collapse from '@material-ui/core/Collapse'\nimport IconButton from '@material-ui/core/IconButton'\nimport ExpandLess from '@material-ui/icons/ExpandLess'\nimport ExpandMore from '@material-ui/icons/ExpandMore'\nimport styled from 'styled-components/macro'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItem, {ListItemProps} from '@material-ui/core/ListItem'\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\nimport {SvgIconProps} from '@material-ui/core/SvgIcon'\nimport Divider from '@material-ui/core/Divider'\nimport Typography from '@material-ui/core/Typography'\nimport Chip from '@material-ui/core/Chip'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport {DefaultTheme} from 'styled-components'\nimport {InjectedScreenSizeProps, withScreenSize} from '../ScreenSize'\n\nconst StyledDrawer = styled(Drawer).attrs({\n    classes: {paper: 'MuiPaperStyle'}\n})`\n    &&{\n        width: ${({open}) => open ? 240 : 0}px;\n        height: 100%;\n        z-index: ${props => props.theme.mui.zIndex.drawer};\n    }\n    \n    a, a:hover{\n        text-decoration: none\n    };\n    \n    li:focus{\n        outline: none;\n    }\n    \n    .MuiPaperStyle{\n        position: relative;\n        background-color: ${({theme}) => theme.tfso.colors.menu};\n        color: ${({theme}) => theme.tfso.colors.menuItemText};\n    }\n    \n    .MuiPaperStyle ::-webkit-scrollbar {\n        width: 7px;\n        background-color: transparent;\n    }\n    \n    .MuiPaperStyle ::-webkit-scrollbar-thumb {\n        border-radius: 10px;\n        background-color: rgba(255,255,255, 0.2);\n    }\n    \n    .MuiPaperStyle ::-webkit-scrollbar-thumb:hover{\n        background-color: rgba(255,255,255, 0.5);\n    }\n    \n    .MuiPaperStyle ::-webkit-scrollbar-track {\n        border-radius: 10px;\n        background-color: transparent;\n    }\n    \n` as typeof Drawer\n\ntype ChipColor = 'success' | 'error' | 'info' | 'warning'\nconst getColor = (color: ChipColor, palette: DefaultTheme['tfso']['palette']) => {\n    switch(color){\n    case 'success': return palette.success\n    case 'error': return palette.alert\n    case 'info': return palette.loudInfo\n    case 'warning': return palette.warning\n    default: return palette.loudInfo\n    }\n}\n\nconst ChipWrapper = ({color: ChipColor, ...props}) => <Chip {...props} />\nconst StyledChip = styled(ChipWrapper)`&&{\n    background-color: ${({color, theme}) => getColor(color, theme.tfso.palette)};\n    color: ${({theme}) => theme.tfso.colors.white};\n    font-size: ${({theme}) => theme.mui.typography.pxToRem(10)}; \n    height: 22px;\n}`\n\nconst StyledListItemText = styled(ListItemText)`&&{\n  flex: 1; /*IE fix*/\n}` as typeof ListItemText\n\nexport type MenuProps = {\n    open: boolean\n    onClose: () => void\n    mobile: boolean\n    children: React.ReactNode\n}\n\nexport default class Menu extends React.PureComponent<MenuProps>{\n    static propTypes = {\n        open: PropTypes.bool.isRequired,\n        onClose: PropTypes.func.isRequired,\n        mobile: PropTypes.bool.isRequired,\n        children: PropTypes.node.isRequired\n    }\n\n    render(){\n        return (\n            <StyledDrawer variant={this.props.mobile ? 'temporary' : 'persistent'} elevation={0} open={this.props.open} onClose={this.props.onClose} transitionDuration={0}>\n                <List color=\"inherit\" disablePadding style={{paddingBottom: 100}}>\n                    {this.props.children}\n                </List>\n            </StyledDrawer>\n        )\n    }\n}\n\nexport const MenuContent = props => <>{props.children}</>\n\nconst ListItemSecondaryText = styled(Typography)`&&{\n    color: ${({theme}) => theme.tfso.colors.grayLight};\n}` as typeof Typography\n\nconst MenuIcon = styled(ListItemIcon)`&&{\n    color: ${({theme}) => theme.tfso.colors.menuItemText};\n    min-width: 36px;\n}` as typeof ListItemIcon\n\nexport type MenuGroupProps = {\n    icon: React.ComponentType<SvgIconProps>\n    subtitle: string\n    label: string\n    onToggleExpanded: () => void\n    expanded: boolean,\n    children: React.ReactNode\n}\n\nconst ListItemWrapper = ({expanded, ...props}: ListItemProps & {expanded: boolean}) => <ListItem {...props as any} />\n\nconst MenuGroupListItem = styled(ListItemWrapper)`&&{\n    background-color: ${({theme, expanded}) => expanded ? theme.tfso.colors.menuExpanded : theme.tfso.colors.menu};\n    :focus {\n        background-color: ${({theme, expanded}) => expanded ? theme.tfso.colors.menuExpanded : theme.tfso.colors.menu};\n    }\n    color: ${({theme}) => theme.tfso.colors.menuItemText};\n    :focus :hover, :hover {\n        background-color: ${({theme}) => theme.tfso.colors.menuItem};\n    };\n}` as React.ComponentType<ListItemProps & {expanded: boolean}>\n\nconst MenuGroupExpandLess = styled(ExpandLess)`&&{\n    color: ${({theme}) => theme.tfso.colors.menuItemText};\n}` as typeof ExpandLess\n\nconst MenuGroupExpandMore = styled(ExpandMore)`&&{\n    color: ${({theme}) => theme.tfso.colors.menuItemText};\n}` as typeof ExpandMore\n\n// @ts-ignore\nexport const MenuGroup = withScreenSize(class MenuGroup extends React.PureComponent<MenuGroupProps & InjectedScreenSizeProps>{\n    static propTypes = {\n        icon: PropTypes.elementType.isRequired,\n        subtitle: PropTypes.string.isRequired,\n        label: PropTypes.string.isRequired,\n        onToggleExpanded: PropTypes.func.isRequired,\n        expanded: PropTypes.bool.isRequired,\n        children: PropTypes.node.isRequired\n    }\n\n    onToggleExpanded = e => {\n        // Stop propagation to let parent layout close mobile menu on clicks that do navigation\n        e.stopPropagation()\n        this.props.onToggleExpanded()\n    }\n\n    render(){\n        const {expanded, subtitle, label, children, icon: Icon} = this.props\n        const mobile = this.props.screenSize.mobile\n        return (\n            <>\n                <MenuGroupListItem\n                    ContainerProps={{\n                        style: {\n                            top: 0,\n                            position: expanded ? 'sticky' : 'relative',\n                            zIndex: expanded ? 1 : 'auto',\n                        }\n                    }}\n                    divider={!expanded}\n                    expanded={expanded}\n                    onClick={this.onToggleExpanded}\n                    button\n                    {...{disableRipple: true} as any} // fuck of types...\n                    disableTouchRipple\n                >\n                    <MenuIcon><Icon fontSize='small' /></MenuIcon>\n                    <StyledListItemText primaryTypographyProps={{color: 'inherit'}}>\n                        {label}\n                        <Collapse in={!expanded} timeout='auto'>\n                            <Tooltip title={subtitle} enterDelay={500}>\n                                <ListItemSecondaryText variant='caption' noWrap style={{display: 'block'}}>\n                                    {subtitle}\n                                </ListItemSecondaryText>\n                            </Tooltip>\n                        </Collapse>\n                    </StyledListItemText>\n                    <ListItemSecondaryAction>\n                        <IconButton onClick={this.onToggleExpanded} disableRipple disableTouchRipple size=\"small\">\n                            {expanded ? <MenuGroupExpandLess /> : <MenuGroupExpandMore />}\n                        </IconButton>\n                    </ListItemSecondaryAction>\n                </MenuGroupListItem>\n                <Collapse in={expanded} timeout=\"auto\">\n                    <List dense={!mobile} disablePadding>\n                        {children}\n                    </List>\n                    {expanded && <Divider />}\n                </Collapse>\n            </>\n        )\n    }\n})\n\nexport type MenuRootItemProps = {\n    icon: React.ComponentType<SvgIconProps>\n    subtitle: string\n    label: string\n    chipLabel?: string\n    chipColor?: ChipColor\n    selected: boolean\n    href?: string | ((content: React.ReactChild) => React.ReactChild)\n}\n\nconst RootListItem = styled(ListItem).attrs({classes: {selected: 'styled-selected'}})`&&{\n    background-color: ${({theme}) => theme.tfso.colors.menu};\n    color: ${({theme}) => theme.tfso.colors.menuItemText};    \n    &&.styled-selected {\n        background-color: ${({theme}) => theme.tfso.colors.menu};\n        color: ${({theme}) => theme.tfso.colors.menuItemSelectedText};\n    };\n    :focus :hover, :hover {\n        background-color: ${({theme}) => theme.tfso.colors.menuItem};\n    };\n}` as typeof ListItem\n\nexport class MenuRootItem extends React.PureComponent<MenuRootItemProps>{\n    static propTypes = {\n        icon: PropTypes.elementType.isRequired,\n        subtitle: PropTypes.string.isRequired,\n        label: PropTypes.string.isRequired,\n        selected: PropTypes.bool.isRequired,\n        href: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n        chipLabel: PropTypes.string,\n        chipColor: PropTypes.oneOf(['success', 'info', 'warning', 'error']),\n    }\n\n    render(){\n        const Icon = this.props.icon\n\n        const LinkContent = (\n            <RootListItem\n                style={{\n                    top: 0,\n                    zIndex: 1,\n                }}\n                divider\n                button\n                disableRipple\n                disableTouchRipple\n                selected={this.props.selected}\n            >\n                <MenuIcon><Icon fontSize='small' /></MenuIcon>\n                <StyledListItemText\n                    primaryTypographyProps={{color: 'initial'}}\n                    // secondaryTypographyProps={{variant: 'caption', noWrap: true}}\n                    // primary={this.props.label}\n                    // secondary={this.props.subtitle}\n                >\n                    {this.props.label}\n                    <div>\n                        <ListItemSecondaryText variant='caption' noWrap style={{display: 'block'}}>\n                            {this.props.subtitle}\n                        </ListItemSecondaryText>\n                    </div>\n                </StyledListItemText>\n                {this.props.chipLabel &&\n                    <StyledChip color={this.props.chipColor} label={this.props.chipLabel}/>\n                }\n            </RootListItem>\n        )\n\n        return (\n            <>\n            {typeof this.props.href === 'string'\n                ? <Link href={this.props.href}>{LinkContent}</Link>\n                : this.props.href\n                    ? this.props.href(LinkContent)\n                    : LinkContent\n            }\n            </>\n        )\n    }\n}\n\nexport type MenuItemProps = {\n    icon?: React.ComponentType<SvgIconProps>\n    label: string\n    selected: boolean\n    href: string | ((content: React.ReactChild) => React.ReactChild)\n    chipLabel?: string\n    chipColor?: 'warning' | 'information'\n}\n\nconst NestedListItem = styled(ListItem)`&&{\n    padding-left: 52px;\n    background-color: ${({theme}) => theme.tfso.colors.menuExpanded};\n    color: ${({selected, theme}) => selected ? theme.tfso.colors.menuItemSelectedText : theme.tfso.colors.menuItemText};\n    :hover {\n        background-color: ${({theme}) => theme.tfso.colors.menu};\n    };\n}` as typeof ListItem\n\nexport class MenuItem extends React.PureComponent<MenuItemProps>{\n    static propTypes = {\n        icon: PropTypes.elementType,\n        label: PropTypes.string.isRequired,\n        selected: PropTypes.bool.isRequired,\n        href: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n        chipLabel: PropTypes.string,\n        chipColor: PropTypes.oneOf(['success', 'info', 'warning', 'error']),\n    }\n\n    render(){\n        const Icon = this.props.icon\n\n        const LinkContent = (\n            <NestedListItem selected={this.props.selected}>\n                {Icon && <MenuIcon><Icon fontSize='small' /></MenuIcon>}\n                <StyledListItemText primaryTypographyProps={{color: 'inherit', noWrap: true}}>\n                    {this.props.label}\n                </StyledListItemText>\n                {this.props.chipLabel &&\n                    <StyledChip color={this.props.chipColor} label={this.props.chipLabel}/>\n                }\n            </NestedListItem>\n        )\n        return (\n            <>\n                {typeof this.props.href === 'string'\n                    ? <Link href={this.props.href}>{LinkContent}</Link>\n                    : this.props.href(LinkContent)\n                }\n            </>\n        )\n    }\n}"],"file":"Menu.js"}