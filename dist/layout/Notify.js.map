{"version":3,"sources":["../../src/lib/layout/Notify.tsx"],"names":["React","styled","NotificationsActiveIcon","NotificationsNoneIcon","CloseIcon","LinearProgress","Popover","Badge","List","ListItem","ListItemAvatar","ListItemText","ListItemSecondaryAction","IconButton","Dialog","Slide","Typography","Toolbar","Button","Divider","Box","ScreenSize","Delay","InfiniteScroll","TransitionComponent","props","ListItemWrapper","read","ReadListItem","theme","tfso","colors","notification","mui","palette","action","hover","notificationHover","CustomDialogTitle","div","getNotificateSecondaryText","date","hours","Math","floor","abs","getTime","Date","now","toLocaleDateString","undefined","day","month","year","toLocaleTimeString","hour","minute","NotificationItem","secondaryText","useMemo","id","onClick","ContainerComponent","avatar","children","Notifier","_anchorEl","createRef","onOpen","onClose","renderNotifyer","count","IconProps","renderToolbar","mobile","width","display","justifyContent","flex","translate","onReadAll","renderLoading","Spacer","height","loading","onLoadMore","open","current","horizontal","vertical","style","renderContent","renderMobile","renderDesktop","PureComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAGA,OAAOC,uBAAP,MAAoC,wCAApC;AACA,OAAOC,qBAAP,MAAkC,sCAAlC;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AAEA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAsC,4BAAtC;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,uBAAP,MAAoC,2CAApC;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,cAAP,MAA2B,mBAA3B;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,KAAK;AAAA,SAAI,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAC;AAAjB,KAA4BA,KAA5B,EAAJ;AAAA,CAAjC;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,MAAEC,IAAF,QAAEA,IAAF;AAAA,MAAWF,KAAX;;AAAA,SAAwD,oBAAC,QAAD,EAAcA,KAAd,CAAxD;AAAA,CAAxB;;AACA,IAAMG,YAAY,GAAG3B,MAAM,CAACyB,eAAD,CAAT,oBACM;AAAA,MAAEC,IAAF,SAAEA,IAAF;AAAA,MAAQE,KAAR,SAAQA,KAAR;AAAA,SAAmBF,IAAI,GAAG,SAAH,GAAeE,KAAK,CAACC,IAAN,CAAWC,MAAX,CAAkBC,YAAxD;AAAA,CADN,EAGU;AAAA,MAAEL,IAAF,SAAEA,IAAF;AAAA,MAAQE,KAAR,SAAQA,KAAR;AAAA,SAAmBF,IAAI,GAAGE,KAAK,CAACI,GAAN,CAAUC,OAAV,CAAkBC,MAAlB,CAAyBC,KAA5B,GAAoCP,KAAK,CAACC,IAAN,CAAWC,MAAX,CAAkBM,iBAA7E;AAAA,CAHV,CAAlB;AAOA,IAAMC,iBAAiB,GAAGrC,MAAM,CAACsC,GAAV,oBAAvB;;AAMA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,IAAD,EAAgB;AAC/C,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAASJ,IAAI,CAACK,OAAL,KAAiBC,IAAI,CAACC,GAAL,EAA1B,IAAwC,OAAnD,CAAd;AACA,SAAON,KAAK,IAAI,EAAT,GACDD,IAAI,CAACQ,kBAAL,CAAwBC,SAAxB,EAAmC;AAACC,IAAAA,GAAG,EAAE,SAAN;AAAiBC,IAAAA,KAAK,EAAE,MAAxB;AAAgCC,IAAAA,IAAI,EAAE;AAAtC,GAAnC,CADC,GAEDZ,IAAI,CAACa,kBAAL,CAAwBJ,SAAxB,EAAmC;AAACK,IAAAA,IAAI,EAAE,SAAP;AAAkBC,IAAAA,MAAM,EAAE;AAA1B,GAAnC,CAFN;AAGH,CALD;;AAmDA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAChC,KAAD,EAAkC;AACvD,MAAMiC,aAAa,GAAG1D,KAAK,CAAC2D,OAAN,CAAc;AAAA,WAAMnB,0BAA0B,CAACf,KAAK,CAACgB,IAAP,CAAhC;AAAA,GAAd,EAA4D,CAAChB,KAAK,CAACgB,IAAP,CAA5D,CAAtB;AAEA,SACI,oBAAC,YAAD;AACI,IAAA,EAAE,EAAEhB,KAAK,CAACmC,EADd;AAEI,IAAA,MAAM,MAFV;AAGI,IAAA,OAAO,EAAEnC,KAAK,CAACoC,OAHnB;AAII,IAAA,OAAO,MAJX;AAKI,IAAA,IAAI,EAAEpC,KAAK,CAACE,IALhB;AAMI,IAAA,kBAAkB,EAAEF,KAAK,CAACqC;AAN9B,KAQKrC,KAAK,CAACsC,MAAN,IAAgB,oBAAC,cAAD,QAAiBtC,KAAK,CAACsC,MAAvB,CARrB,EASI,oBAAC,YAAD;AAAc,IAAA,SAAS,EAAEL;AAAzB,KACKjC,KAAK,CAACuC,QADX,CATJ,EAYKvC,KAAK,CAACU,MAAN,IAAgB,oBAAC,uBAAD,QACZV,KAAK,CAACU,MADM,CAZrB,CADJ;AAkBH,CArBD;;AAmCA,SAAQsB,gBAAR;;IAsDqBQ,Q;;;;;;;;;;;;;;;;;UAcjBC,S,GAAgDlE,KAAK,CAACmE,SAAN,E;;UAEhDC,M,GAAS,YAAM;AACX,YAAK3C,KAAL,CAAW2C,MAAX;AACH,K;;UAEDC,O,GAAU,YAAM;AACZ,YAAK5C,KAAL,CAAW4C,OAAX;AACH,K;;UAEDC,c,GAAiB;AAAA,aACb,oBAAC,UAAD;AAAY,QAAA,SAAS,EAAE,MAAKJ,SAA5B;AAAuC,QAAA,OAAO,EAAE,MAAKE;AAArD,SACK,MAAK3C,KAAL,CAAW8C,KAAX,GAAmB,CAAnB,GACK,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAC,OAAb;AAAqB,QAAA,YAAY,EAAE,MAAK9C,KAAL,CAAW8C,KAA9C;AAAqD,QAAA,GAAG,EAAE;AAA1D,SAA6D,oBAAC,uBAAD,EAA6B,MAAK9C,KAAL,CAAW+C,SAAxC,CAA7D,CADL,GAEK,oBAAC,qBAAD,EAA2B,MAAK/C,KAAL,CAAW+C,SAAtC,CAHV,CADa;AAAA,K;;UASjBC,a,GAAgB,UAACC,MAAD;AAAA,aACZ,0CACI,oBAAC,OAAD;AAAS,QAAA,OAAO,EAAC;AAAjB,SACI;AAAK,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAE,MAAR;AAAgBC,UAAAA,OAAO,EAAE,MAAzB;AAAiCC,UAAAA,cAAc,EAAE;AAAjD;AAAZ,SACI,oBAAC,UAAD;AAAY,QAAA,KAAK,EAAE;AAACC,UAAAA,IAAI,EAAE;AAAP,SAAnB;AAA8B,QAAA,OAAO,EAAEJ,MAAM,GAAG,WAAH,GAAiB;AAA9D,SAA6E,MAAKjD,KAAL,CAAWsD,SAAX,CAAqB,eAArB,CAA7E,CADJ,EAEI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,MAAKtD,KAAL,CAAWuD,SAA5B;AAAuC,QAAA,OAAO,EAAC,MAA/C;AAAsD,QAAA,IAAI,EAAC,OAA3D;AAAmE,QAAA,KAAK,EAAC;AAAzE,SACK,MAAKvD,KAAL,CAAWsD,SAAX,CAAqB,kBAArB,CADL,CAFJ,CADJ,CADJ,EASK,MAAKE,aAAL,EATL,EAUI,oBAAC,OAAD,OAVJ,CADY;AAAA,K;;UA8DhBA,a,GAAgB,YAAM;AAClB,UAAMC,MAAM,GAAG;AAAK,QAAA,KAAK,EAAE;AAACC,UAAAA,MAAM,EAAE;AAAT;AAAZ,QAAf;AACA,aACI,MAAK1D,KAAL,CAAW2D,OAAX,GACI,oBAAC,KAAD;AAAO,QAAA,OAAO,EAAE,GAAhB;AAAqB,QAAA,UAAU,EAAEF;AAAjC,SACI,oBAAC,cAAD;AAAgB,QAAA,KAAK,EAAC;AAAtB,QADJ,CADJ,GAIIA,MALR;AAOH,K;;;;;;;kCAxDaR,M,EAAgB;AAC1B,aACI,oBAAC,cAAD;AAAgB,QAAA,MAAM,EAAEA,MAAM,GAAGxB,SAAH,GAAe,GAA7C;AAAkD,QAAA,SAAS,EAAE,GAA7D;AAAkE,QAAA,gBAAgB,EAAE,KAAKzB,KAAL,CAAW4D;AAA/F,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACX,MAAd;AAAsB,QAAA,cAAc;AAApC,SACK,KAAKjD,KAAL,CAAWuC,QADhB,CADJ,CADJ;AAOH;;;oCAEc;AACX,aACI,oBAAC,OAAD;AACI,QAAA,IAAI,EAAE,KAAKvC,KAAL,CAAW6D,IADrB;AAEI,QAAA,OAAO,EAAE,KAAKjB,OAFlB;AAGI,QAAA,QAAQ,EAAE,KAAKH,SAAL,CAAeqB,OAH7B;AAII,QAAA,YAAY,EAAE;AAACC,UAAAA,UAAU,EAAE,OAAb;AAAsBC,UAAAA,QAAQ,EAAE;AAAhC,SAJlB;AAKI,QAAA,eAAe,EAAE;AAACA,UAAAA,QAAQ,EAAE,KAAX;AAAkBD,UAAAA,UAAU,EAAE;AAA9B,SALrB;AAMI,QAAA,UAAU,EAAE;AAACE,UAAAA,KAAK,EAAE;AAACf,YAAAA,KAAK,EAAE;AAAR;AAAR;AANhB,SAQK,KAAKF,aAAL,CAAmB,KAAnB,CARL,EASK,KAAKkB,aAAL,CAAmB,KAAnB,CATL,CADJ;AAaH;;;mCAEa;AACV,aACI,oBAAC,MAAD;AACI,QAAA,mBAAmB,EAAEnE,mBADzB;AAEI,QAAA,IAAI,EAAE,KAAKC,KAAL,CAAW6D,IAFrB;AAGI,QAAA,OAAO,EAAE,KAAKjB,OAHlB;AAII,QAAA,UAAU;AAJd,SAMI,oBAAC,iBAAD,QACI,oBAAC,UAAD;AAAY,QAAA,IAAI,EAAC,GAAjB;AAAqB,QAAA,IAAI,EAAC,OAA1B;AAAkC,QAAA,OAAO,EAAE,KAAKA,OAAhD;AAAyD,sBAAW;AAApE,SACI,oBAAC,SAAD,OADJ,CADJ,CANJ,EAWI,oBAAC,GAAD,QACK,KAAKI,aAAL,CAAmB,IAAnB,CADL,CAXJ,EAcK,KAAKkB,aAAL,CAAmB,IAAnB,CAdL,CADJ;AAkBH;;;6BAaO;AAAA;;AACJ,aACI,0CACK,KAAKrB,cAAL,EADL,EAEI,oBAAC,UAAD,QACK;AAAA,YAAEI,MAAF,SAAEA,MAAF;AAAA,eAAcA,MAAM,GAAG,MAAI,CAACkB,YAAL,EAAH,GAAyB,MAAI,CAACC,aAAL,EAA7C;AAAA,OADL,CAFJ,CADJ;AAQH;;;;EAnHiC7F,KAAK,CAAC8F,a;;SAAvB7B,Q","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\n\nimport NotificationsActiveIcon from '@material-ui/icons/NotificationsActive'\nimport NotificationsNoneIcon from '@material-ui/icons/NotificationsNone'\nimport CloseIcon from '@material-ui/icons/Close'\n\nimport LinearProgress from '@material-ui/core/LinearProgress'\nimport Popover from '@material-ui/core/Popover'\nimport Badge from '@material-ui/core/Badge'\nimport List from '@material-ui/core/List'\nimport ListItem, {ListItemProps} from '@material-ui/core/ListItem'\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\nimport IconButton from '@material-ui/core/IconButton'\nimport Dialog from '@material-ui/core/Dialog'\nimport Slide from '@material-ui/core/Slide'\nimport Typography from '@material-ui/core/Typography'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Button from '@material-ui/core/Button'\nimport Divider from '@material-ui/core/Divider'\nimport {SvgIconProps} from '@material-ui/core/SvgIcon'\nimport Box from '@material-ui/core/Box'\n\nimport ScreenSize from '../ScreenSize'\nimport Delay from '../Delay'\nimport InfiniteScroll from '../InfiniteScroll'\n\nconst TransitionComponent = props => <Slide direction='down' {...props} />\n\nconst ListItemWrapper = ({read, ...props}: ListItemProps & {read?: boolean}) => <ListItem {...props as any} />\nconst ReadListItem = styled(ListItemWrapper)`&&{\n    background-color: ${({read, theme}) => read ? 'inherit' : theme.tfso.colors.notification};\n    :hover {\n        background-color: ${({read, theme}) => read ? theme.mui.palette.action.hover : theme.tfso.colors.notificationHover};\n    };\n}`\n\nconst CustomDialogTitle = styled.div`\n  display: flex;\n  flex-flow: row-reverse;\n  padding: 5px;\n`\n\nconst getNotificateSecondaryText = (date: Date) => {\n    const hours = Math.floor(Math.abs(date.getTime() - Date.now()) / 3600000)\n    return hours >= 24\n        ? date.toLocaleDateString(undefined, {day: 'numeric', month: 'long', year: 'numeric'})\n        : date.toLocaleTimeString(undefined, {hour: '2-digit', minute: '2-digit'})\n}\n\nexport type NotificationItemProps = {\n    /**\n     * Unique identifier of the Notification.\n     * Spread to the `ListItem` component.\n     */\n    id: string\n\n    /**\n     * Date when the notification was created.\n     */\n    date: Date\n\n    /**\n     * `true` when the notification has been displayed to the user.\n     */\n    seen?: boolean\n    /**\n     * `true` when the user has marked the notification as read either by:\n     * - marking all notifications as read.\n     * - clicking on the notification.\n     */\n    read?: boolean\n\n    /**\n     * Callback when the user clicks the notification.\n     * you should set `read` to `true` in this callback before anything else.\n     */\n    onClick: () => void\n\n    /**\n     * Should be either an `<Avatar>`, `<SvgIcon>` or `undefined`. Wrapped in a ListItemAvatar\n     */\n    avatar?: React.ReactElement\n\n    /**\n     * <Typography> formatted text, or string\n     */\n    children: React.ReactChild\n\n    action?: React.ReactChild\n\n    ContainerComponent?: ListItemProps['ContainerComponent']\n}\n\nconst NotificationItem = (props: NotificationItemProps) => {\n    const secondaryText = React.useMemo(() => getNotificateSecondaryText(props.date), [props.date])\n\n    return (\n        <ReadListItem\n            id={props.id}\n            button\n            onClick={props.onClick}\n            divider\n            read={props.read}\n            ContainerComponent={props.ContainerComponent}\n        >\n            {props.avatar && <ListItemAvatar>{props.avatar}</ListItemAvatar>}\n            <ListItemText secondary={secondaryText}>\n                {props.children}\n            </ListItemText>\n            {props.action && <ListItemSecondaryAction>\n                {props.action}\n            </ListItemSecondaryAction>}\n        </ReadListItem>\n    )\n}\n\nNotificationItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    date: PropTypes.object.isRequired,\n    seen: PropTypes.bool,\n    read: PropTypes.bool,\n    onClick: PropTypes.func.isRequired,\n    avatar: PropTypes.node,\n    children: PropTypes.node.isRequired,\n    action: PropTypes.node,\n    ContainerComponent: PropTypes.any\n}\n\nexport {NotificationItem}\n\nexport type NotifierProps = {\n    /**\n     * Number of new notifications\n     */\n    count: number\n\n    /**\n     * Display a loading indicator\n     */\n    loading?: boolean\n\n    open: boolean\n\n    /* function for translation */\n    translate: (key: string) => string\n\n    /**\n     * Callback when the user clicked the bell and opens the list of notifications.\n     * You may want to fetch new notifications here.\n     * When you're done fetching data, it is your responsibility to mark all notifications as read if the notifications is still open.\n     */\n    onOpen: () => void\n\n    /**\n     * Invoked when the user clicks the `Mark all as read` button\n     * You should set the notifications as read here.\n     */\n    onReadAll: () => void\n\n    /**\n     * Invoked when the user scrolled to the end of the list\n     */\n    onLoadMore: () => Promise<void>\n\n    /**\n     * Invoked when the list is closed.\n     */\n    onClose: () => void\n\n    /**\n     * Render your notifications here.\n     * The children will be wrapped in a `List`component.\n     * Typically a `NotificationItem`, but anything goes.\n     */\n    children: React.ReactNode\n\n    /**\n     * Properties for the Notification Bell icon\n     */\n    IconProps?: SvgIconProps\n}\n\nexport default class Notifier extends React.PureComponent<NotifierProps>{\n    static propTypes = {\n        count: PropTypes.number.isRequired,\n        loading: PropTypes.bool,\n        open: PropTypes.bool.isRequired,\n        translate: PropTypes.func.isRequired,\n        onOpen: PropTypes.func.isRequired,\n        onReadAll: PropTypes.func.isRequired,\n        onLoadMore: PropTypes.func.isRequired,\n        onClose: PropTypes.func.isRequired,\n        children: PropTypes.node.isRequired,\n        IconProps: PropTypes.object,\n    }\n\n    _anchorEl: React.RefObject<HTMLButtonElement> = React.createRef()\n\n    onOpen = () => {\n        this.props.onOpen()\n    }\n\n    onClose = () => {\n        this.props.onClose()\n    }\n\n    renderNotifyer = () => (\n        <IconButton buttonRef={this._anchorEl} onClick={this.onOpen} >\n            {this.props.count > 0\n                ? <Badge color='error' badgeContent={this.props.count} max={9}><NotificationsActiveIcon {...this.props.IconProps} /></Badge>\n                : <NotificationsNoneIcon {...this.props.IconProps} />\n            }\n        </IconButton>\n    )\n\n    renderToolbar = (mobile: boolean) => (\n        <>\n            <Toolbar variant='dense'>\n                <div style={{width: '100%', display: 'flex', justifyContent: 'space-between'}}>\n                    <Typography style={{flex: 1}} variant={mobile ? 'subtitle1' : 'subtitle2'} >{this.props.translate('Notifications')}</Typography>\n                    <Button onClick={this.props.onReadAll} variant='text' size='small' color='primary' >\n                        {this.props.translate('Mark all as read')}\n                    </Button>\n                </div>\n            </Toolbar>\n            {this.renderLoading()}\n            <Divider />\n        </>\n    )\n\n    renderContent(mobile: boolean){\n        return (\n            <InfiniteScroll height={mobile ? undefined : 500} threshold={0.2} onReachThreshold={this.props.onLoadMore}>\n                <List dense={!mobile} disablePadding>\n                    {this.props.children}\n                </List>\n            </InfiniteScroll>\n        )\n    }\n\n    renderDesktop(){\n        return (\n            <Popover\n                open={this.props.open}\n                onClose={this.onClose}\n                anchorEl={this._anchorEl.current}\n                anchorOrigin={{horizontal: 'right', vertical: 'bottom'}}\n                transformOrigin={{vertical: 'top', horizontal: 'right'}}\n                PaperProps={{style: {width: 500}}}\n            >\n                {this.renderToolbar(false)}\n                {this.renderContent(false)}\n            </Popover>\n        )\n    }\n\n    renderMobile(){\n        return (\n            <Dialog\n                TransitionComponent={TransitionComponent}\n                open={this.props.open}\n                onClose={this.onClose}\n                fullScreen\n            >\n                <CustomDialogTitle>\n                    <IconButton href=\"#\" size=\"small\" onClick={this.onClose} aria-label=\"Close\">\n                        <CloseIcon />\n                    </IconButton>\n                </CustomDialogTitle>\n                <Box>\n                    {this.renderToolbar(true)}\n                </Box>\n                {this.renderContent(true)}\n            </Dialog>\n        )\n    }\n\n    renderLoading = () => {\n        const Spacer = <div style={{height: 4}} />\n        return (\n            this.props.loading ? (\n                <Delay delayMs={200} beforeShow={Spacer}>\n                    <LinearProgress color='secondary' />\n                </Delay>\n            ) : Spacer\n        )\n    }\n\n    render(){\n        return (\n            <>\n                {this.renderNotifyer()}\n                <ScreenSize>\n                    {({mobile}) => mobile ? this.renderMobile() : this.renderDesktop()}\n                </ScreenSize>\n            </>\n        )\n    }\n}"],"file":"Notify.js"}