import React from 'react';
import { DefaultTheme } from 'styled-components';
import { SvgIconProps } from '@material-ui/core/SvgIcon';
export declare type TrendingProps = {
    variant: 'up' | 'down' | 'flat';
} & SvgIconProps;
declare const _default: React.MemoExoticComponent<React.ForwardRefExoticComponent<{
    string?: string | number | undefined;
    variant: "flat" | "up" | "down";
    style?: React.CSSProperties | undefined;
    clipPath?: string | undefined;
    filter?: string | undefined;
    mask?: string | undefined;
    ref?: ((instance: SVGSVGElement | null) => void) | React.RefObject<SVGSVGElement> | null | undefined;
    color?: "error" | "inherit" | "default" | "disabled" | "action" | "primary" | "secondary" | undefined;
    cursor?: string | number | undefined;
    direction?: string | number | undefined;
    display?: string | number | undefined;
    fontFamily?: string | undefined;
    fontSize?: "small" | "inherit" | "default" | "large" | undefined;
    fontSizeAdjust?: string | number | undefined;
    fontStretch?: string | number | undefined;
    fontStyle?: string | number | undefined;
    fontVariant?: string | number | undefined;
    fontWeight?: string | number | undefined;
    height?: string | number | undefined;
    imageRendering?: string | number | undefined;
    letterSpacing?: string | number | undefined;
    opacity?: string | number | undefined;
    order?: string | number | undefined;
    overflow?: string | number | undefined;
    paintOrder?: string | number | undefined;
    pointerEvents?: string | number | undefined;
    rotate?: string | number | undefined;
    scale?: string | number | undefined;
    textRendering?: string | number | undefined;
    transform?: string | undefined;
    unicodeBidi?: string | number | undefined;
    visibility?: string | number | undefined;
    width?: string | number | undefined;
    wordSpacing?: string | number | undefined;
    writingMode?: string | number | undefined;
    offset?: string | number | undefined;
    textDecoration?: string | number | undefined;
    clip?: string | number | undefined;
    alignmentBaseline?: "inherit" | "baseline" | "auto" | "middle" | "after-edge" | "alphabetic" | "before-edge" | "central" | "hanging" | "ideographic" | "mathematical" | "text-after-edge" | "text-before-edge" | undefined;
    baselineShift?: string | number | undefined;
    clipRule?: string | number | undefined;
    colorInterpolation?: string | number | undefined;
    colorRendering?: string | number | undefined;
    dominantBaseline?: string | number | undefined;
    fill?: string | undefined;
    fillOpacity?: string | number | undefined;
    fillRule?: "inherit" | "evenodd" | "nonzero" | undefined;
    floodColor?: string | number | undefined;
    floodOpacity?: string | number | undefined;
    glyphOrientationVertical?: string | number | undefined;
    lightingColor?: string | number | undefined;
    markerEnd?: string | undefined;
    markerMid?: string | undefined;
    markerStart?: string | undefined;
    shapeRendering?: string | undefined;
    stopColor?: string | undefined;
    stopOpacity?: string | number | undefined;
    stroke?: string | undefined;
    strokeDasharray?: string | number | undefined;
    strokeDashoffset?: string | number | undefined;
    strokeLinecap?: "inherit" | "round" | "butt" | "square" | undefined;
    strokeLinejoin?: "inherit" | "round" | "bevel" | "miter" | undefined;
    strokeMiterlimit?: string | number | undefined;
    strokeOpacity?: string | number | undefined;
    strokeWidth?: string | number | undefined;
    textAnchor?: string | undefined;
    vectorEffect?: string | number | undefined;
    end?: string | number | undefined;
    local?: string | number | undefined;
    alphabetic?: string | number | undefined;
    hanging?: string | number | undefined;
    ideographic?: string | number | undefined;
    mathematical?: string | number | undefined;
    classes?: Partial<Record<import("@material-ui/core/SvgIcon").SvgIconClassKey, string>> | undefined;
    className?: string | undefined;
    id?: string | undefined;
    lang?: string | undefined;
    tabIndex?: number | undefined;
    role?: string | undefined;
    children?: React.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: ((event: React.ClipboardEvent<SVGSVGElement>) => void) | undefined;
    onCopyCapture?: ((event: React.ClipboardEvent<SVGSVGElement>) => void) | undefined;
    onCut?: ((event: React.ClipboardEvent<SVGSVGElement>) => void) | undefined;
    onCutCapture?: ((event: React.ClipboardEvent<SVGSVGElement>) => void) | undefined;
    onPaste?: ((event: React.ClipboardEvent<SVGSVGElement>) => void) | undefined;
    onPasteCapture?: ((event: React.ClipboardEvent<SVGSVGElement>) => void) | undefined;
    onCompositionEnd?: ((event: React.CompositionEvent<SVGSVGElement>) => void) | undefined;
    onCompositionEndCapture?: ((event: React.CompositionEvent<SVGSVGElement>) => void) | undefined;
    onCompositionStart?: ((event: React.CompositionEvent<SVGSVGElement>) => void) | undefined;
    onCompositionStartCapture?: ((event: React.CompositionEvent<SVGSVGElement>) => void) | undefined;
    onCompositionUpdate?: ((event: React.CompositionEvent<SVGSVGElement>) => void) | undefined;
    onCompositionUpdateCapture?: ((event: React.CompositionEvent<SVGSVGElement>) => void) | undefined;
    onFocus?: ((event: React.FocusEvent<SVGSVGElement>) => void) | undefined;
    onFocusCapture?: ((event: React.FocusEvent<SVGSVGElement>) => void) | undefined;
    onBlur?: ((event: React.FocusEvent<SVGSVGElement>) => void) | undefined;
    onBlurCapture?: ((event: React.FocusEvent<SVGSVGElement>) => void) | undefined;
    onChange?: ((event: React.FormEvent<SVGSVGElement>) => void) | undefined;
    onChangeCapture?: ((event: React.FormEvent<SVGSVGElement>) => void) | undefined;
    onBeforeInput?: ((event: React.FormEvent<SVGSVGElement>) => void) | undefined;
    onBeforeInputCapture?: ((event: React.FormEvent<SVGSVGElement>) => void) | undefined;
    onInput?: ((event: React.FormEvent<SVGSVGElement>) => void) | undefined;
    onInputCapture?: ((event: React.FormEvent<SVGSVGElement>) => void) | undefined;
    onReset?: ((event: React.FormEvent<SVGSVGElement>) => void) | undefined;
    onResetCapture?: ((event: React.FormEvent<SVGSVGElement>) => void) | undefined;
    onSubmit?: ((event: React.FormEvent<SVGSVGElement>) => void) | undefined;
    onSubmitCapture?: ((event: React.FormEvent<SVGSVGElement>) => void) | undefined;
    onInvalid?: ((event: React.FormEvent<SVGSVGElement>) => void) | undefined;
    onInvalidCapture?: ((event: React.FormEvent<SVGSVGElement>) => void) | undefined;
    onLoad?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onLoadCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onError?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onErrorCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onKeyDown?: ((event: React.KeyboardEvent<SVGSVGElement>) => void) | undefined;
    onKeyDownCapture?: ((event: React.KeyboardEvent<SVGSVGElement>) => void) | undefined;
    onKeyPress?: ((event: React.KeyboardEvent<SVGSVGElement>) => void) | undefined;
    onKeyPressCapture?: ((event: React.KeyboardEvent<SVGSVGElement>) => void) | undefined;
    onKeyUp?: ((event: React.KeyboardEvent<SVGSVGElement>) => void) | undefined;
    onKeyUpCapture?: ((event: React.KeyboardEvent<SVGSVGElement>) => void) | undefined;
    onAbort?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onAbortCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onCanPlay?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onCanPlayCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onCanPlayThrough?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onCanPlayThroughCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onDurationChange?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onDurationChangeCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onEmptied?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onEmptiedCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onEncrypted?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onEncryptedCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onEnded?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onEndedCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onLoadedData?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onLoadedDataCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onLoadedMetadata?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onLoadedMetadataCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onLoadStart?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onLoadStartCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onPause?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onPauseCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onPlay?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onPlayCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onPlaying?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onPlayingCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onProgress?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onProgressCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onRateChange?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onRateChangeCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onSeeked?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onSeekedCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onSeeking?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onSeekingCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onStalled?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onStalledCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onSuspend?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onSuspendCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onTimeUpdate?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onTimeUpdateCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onVolumeChange?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onVolumeChangeCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onWaiting?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onWaitingCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onClick?: ((event: React.MouseEvent<SVGSVGElement, MouseEvent>) => void) | undefined;
    onClickCapture?: ((event: React.MouseEvent<SVGSVGElement, MouseEvent>) => void) | undefined;
    onContextMenu?: ((event: React.MouseEvent<SVGSVGElement, MouseEvent>) => void) | undefined;
    onContextMenuCapture?: ((event: React.MouseEvent<SVGSVGElement, MouseEvent>) => void) | undefined;
    onDoubleClick?: ((event: React.MouseEvent<SVGSVGElement, MouseEvent>) => void) | undefined;
    onDoubleClickCapture?: ((event: React.MouseEvent<SVGSVGElement, MouseEvent>) => void) | undefined;
    onDrag?: ((event: React.DragEvent<SVGSVGElement>) => void) | undefined;
    onDragCapture?: ((event: React.DragEvent<SVGSVGElement>) => void) | undefined;
    onDragEnd?: ((event: React.DragEvent<SVGSVGElement>) => void) | undefined;
    onDragEndCapture?: ((event: React.DragEvent<SVGSVGElement>) => void) | undefined;
    onDragEnter?: ((event: React.DragEvent<SVGSVGElement>) => void) | undefined;
    onDragEnterCapture?: ((event: React.DragEvent<SVGSVGElement>) => void) | undefined;
    onDragExit?: ((event: React.DragEvent<SVGSVGElement>) => void) | undefined;
    onDragExitCapture?: ((event: React.DragEvent<SVGSVGElement>) => void) | undefined;
    onDragLeave?: ((event: React.DragEvent<SVGSVGElement>) => void) | undefined;
    onDragLeaveCapture?: ((event: React.DragEvent<SVGSVGElement>) => void) | undefined;
    onDragOver?: ((event: React.DragEvent<SVGSVGElement>) => void) | undefined;
    onDragOverCapture?: ((event: React.DragEvent<SVGSVGElement>) => void) | undefined;
    onDragStart?: ((event: React.DragEvent<SVGSVGElement>) => void) | undefined;
    onDragStartCapture?: ((event: React.DragEvent<SVGSVGElement>) => void) | undefined;
    onDrop?: ((event: React.DragEvent<SVGSVGElement>) => void) | undefined;
    onDropCapture?: ((event: React.DragEvent<SVGSVGElement>) => void) | undefined;
    onMouseDown?: ((event: React.MouseEvent<SVGSVGElement, MouseEvent>) => void) | undefined;
    onMouseDownCapture?: ((event: React.MouseEvent<SVGSVGElement, MouseEvent>) => void) | undefined;
    onMouseEnter?: ((event: React.MouseEvent<SVGSVGElement, MouseEvent>) => void) | undefined;
    onMouseLeave?: ((event: React.MouseEvent<SVGSVGElement, MouseEvent>) => void) | undefined;
    onMouseMove?: ((event: React.MouseEvent<SVGSVGElement, MouseEvent>) => void) | undefined;
    onMouseMoveCapture?: ((event: React.MouseEvent<SVGSVGElement, MouseEvent>) => void) | undefined;
    onMouseOut?: ((event: React.MouseEvent<SVGSVGElement, MouseEvent>) => void) | undefined;
    onMouseOutCapture?: ((event: React.MouseEvent<SVGSVGElement, MouseEvent>) => void) | undefined;
    onMouseOver?: ((event: React.MouseEvent<SVGSVGElement, MouseEvent>) => void) | undefined;
    onMouseOverCapture?: ((event: React.MouseEvent<SVGSVGElement, MouseEvent>) => void) | undefined;
    onMouseUp?: ((event: React.MouseEvent<SVGSVGElement, MouseEvent>) => void) | undefined;
    onMouseUpCapture?: ((event: React.MouseEvent<SVGSVGElement, MouseEvent>) => void) | undefined;
    onSelect?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onSelectCapture?: ((event: React.SyntheticEvent<SVGSVGElement, Event>) => void) | undefined;
    onTouchCancel?: ((event: React.TouchEvent<SVGSVGElement>) => void) | undefined;
    onTouchCancelCapture?: ((event: React.TouchEvent<SVGSVGElement>) => void) | undefined;
    onTouchEnd?: ((event: React.TouchEvent<SVGSVGElement>) => void) | undefined;
    onTouchEndCapture?: ((event: React.TouchEvent<SVGSVGElement>) => void) | undefined;
    onTouchMove?: ((event: React.TouchEvent<SVGSVGElement>) => void) | undefined;
    onTouchMoveCapture?: ((event: React.TouchEvent<SVGSVGElement>) => void) | undefined;
    onTouchStart?: ((event: React.TouchEvent<SVGSVGElement>) => void) | undefined;
    onTouchStartCapture?: ((event: React.TouchEvent<SVGSVGElement>) => void) | undefined;
    onPointerDown?: ((event: React.PointerEvent<SVGSVGElement>) => void) | undefined;
    onPointerDownCapture?: ((event: React.PointerEvent<SVGSVGElement>) => void) | undefined;
    onPointerMove?: ((event: React.PointerEvent<SVGSVGElement>) => void) | undefined;
    onPointerMoveCapture?: ((event: React.PointerEvent<SVGSVGElement>) => void) | undefined;
    onPointerUp?: ((event: React.PointerEvent<SVGSVGElement>) => void) | undefined;
    onPointerUpCapture?: ((event: React.PointerEvent<SVGSVGElement>) => void) | undefined;
    onPointerCancel?: ((event: React.PointerEvent<SVGSVGElement>) => void) | undefined;
    onPointerCancelCapture?: ((event: React.PointerEvent<SVGSVGElement>) => void) | undefined;
    onPointerEnter?: ((event: React.PointerEvent<SVGSVGElement>) => void) | undefined;
    onPointerEnterCapture?: ((event: React.PointerEvent<SVGSVGElement>) => void) | undefined;
    onPointerLeave?: ((event: React.PointerEvent<SVGSVGElement>) => void) | undefined;
    onPointerLeaveCapture?: ((event: React.PointerEvent<SVGSVGElement>) => void) | undefined;
    onPointerOver?: ((event: React.PointerEvent<SVGSVGElement>) => void) | undefined;
    onPointerOverCapture?: ((event: React.PointerEvent<SVGSVGElement>) => void) | undefined;
    onPointerOut?: ((event: React.PointerEvent<SVGSVGElement>) => void) | undefined;
    onPointerOutCapture?: ((event: React.PointerEvent<SVGSVGElement>) => void) | undefined;
    onGotPointerCapture?: ((event: React.PointerEvent<SVGSVGElement>) => void) | undefined;
    onGotPointerCaptureCapture?: ((event: React.PointerEvent<SVGSVGElement>) => void) | undefined;
    onLostPointerCapture?: ((event: React.PointerEvent<SVGSVGElement>) => void) | undefined;
    onLostPointerCaptureCapture?: ((event: React.PointerEvent<SVGSVGElement>) => void) | undefined;
    onScroll?: ((event: React.UIEvent<SVGSVGElement>) => void) | undefined;
    onScrollCapture?: ((event: React.UIEvent<SVGSVGElement>) => void) | undefined;
    onWheel?: ((event: React.WheelEvent<SVGSVGElement>) => void) | undefined;
    onWheelCapture?: ((event: React.WheelEvent<SVGSVGElement>) => void) | undefined;
    onAnimationStart?: ((event: React.AnimationEvent<SVGSVGElement>) => void) | undefined;
    onAnimationStartCapture?: ((event: React.AnimationEvent<SVGSVGElement>) => void) | undefined;
    onAnimationEnd?: ((event: React.AnimationEvent<SVGSVGElement>) => void) | undefined;
    onAnimationEndCapture?: ((event: React.AnimationEvent<SVGSVGElement>) => void) | undefined;
    onAnimationIteration?: ((event: React.AnimationEvent<SVGSVGElement>) => void) | undefined;
    onAnimationIterationCapture?: ((event: React.AnimationEvent<SVGSVGElement>) => void) | undefined;
    onTransitionEnd?: ((event: React.TransitionEvent<SVGSVGElement>) => void) | undefined;
    onTransitionEndCapture?: ((event: React.TransitionEvent<SVGSVGElement>) => void) | undefined;
    component?: "symbol" | React.ComponentClass<SvgIconProps, any> | React.FunctionComponent<SvgIconProps> | "svg" | "animate" | "animateMotion" | "animateTransform" | "defs" | "desc" | "foreignObject" | "g" | "metadata" | "mpath" | "switch" | undefined;
    elevation?: string | number | undefined;
    innerRef?: ((instance: any) => void) | React.RefObject<any> | null | undefined;
    href?: string | undefined;
    media?: string | undefined;
    target?: string | undefined;
    type?: string | undefined;
    name?: string | undefined;
    key?: string | number | undefined;
    max?: string | number | undefined;
    method?: string | undefined;
    min?: string | number | undefined;
    accentHeight?: string | number | undefined;
    accumulate?: "none" | "sum" | undefined;
    additive?: "sum" | "replace" | undefined;
    allowReorder?: "no" | "yes" | undefined;
    amplitude?: string | number | undefined;
    arabicForm?: "initial" | "medial" | "terminal" | "isolated" | undefined;
    ascent?: string | number | undefined;
    attributeName?: string | undefined;
    attributeType?: string | undefined;
    autoReverse?: string | number | undefined;
    azimuth?: string | number | undefined;
    baseFrequency?: string | number | undefined;
    baseProfile?: string | number | undefined;
    bbox?: string | number | undefined;
    begin?: string | number | undefined;
    bias?: string | number | undefined;
    by?: string | number | undefined;
    calcMode?: string | number | undefined;
    capHeight?: string | number | undefined;
    clipPathUnits?: string | number | undefined;
    colorInterpolationFilters?: "inherit" | "auto" | "linearRGB" | "sRGB" | undefined;
    colorProfile?: string | number | undefined;
    contentScriptType?: string | number | undefined;
    contentStyleType?: string | number | undefined;
    cx?: string | number | undefined;
    cy?: string | number | undefined;
    d?: string | undefined;
    decelerate?: string | number | undefined;
    descent?: string | number | undefined;
    diffuseConstant?: string | number | undefined;
    divisor?: string | number | undefined;
    dur?: string | number | undefined;
    dx?: string | number | undefined;
    dy?: string | number | undefined;
    edgeMode?: string | number | undefined;
    enableBackground?: string | number | undefined;
    exponent?: string | number | undefined;
    externalResourcesRequired?: string | number | undefined;
    filterRes?: string | number | undefined;
    filterUnits?: string | number | undefined;
    focusable?: string | number | undefined;
    format?: string | number | undefined;
    from?: string | number | undefined;
    fx?: string | number | undefined;
    fy?: string | number | undefined;
    g1?: string | number | undefined;
    g2?: string | number | undefined;
    glyphName?: string | number | undefined;
    glyphOrientationHorizontal?: string | number | undefined;
    glyphRef?: string | number | undefined;
    gradientTransform?: string | undefined;
    gradientUnits?: string | undefined;
    horizAdvX?: string | number | undefined;
    horizOriginX?: string | number | undefined;
    in2?: string | number | undefined;
    in?: string | undefined;
    intercept?: string | number | undefined;
    k1?: string | number | undefined;
    k2?: string | number | undefined;
    k3?: string | number | undefined;
    k4?: string | number | undefined;
    k?: string | number | undefined;
    kernelMatrix?: string | number | undefined;
    kernelUnitLength?: string | number | undefined;
    kerning?: string | number | undefined;
    keyPoints?: string | number | undefined;
    keySplines?: string | number | undefined;
    keyTimes?: string | number | undefined;
    lengthAdjust?: string | number | undefined;
    limitingConeAngle?: string | number | undefined;
    markerHeight?: string | number | undefined;
    markerUnits?: string | number | undefined;
    markerWidth?: string | number | undefined;
    maskContentUnits?: string | number | undefined;
    maskUnits?: string | number | undefined;
    mode?: string | number | undefined;
    numOctaves?: string | number | undefined;
    operator?: string | number | undefined;
    orient?: string | number | undefined;
    orientation?: string | number | undefined;
    origin?: string | number | undefined;
    overlinePosition?: string | number | undefined;
    overlineThickness?: string | number | undefined;
    panose1?: string | number | undefined;
    pathLength?: string | number | undefined;
    patternContentUnits?: string | undefined;
    patternTransform?: string | number | undefined;
    patternUnits?: string | undefined;
    points?: string | undefined;
    pointsAtX?: string | number | undefined;
    pointsAtY?: string | number | undefined;
    pointsAtZ?: string | number | undefined;
    preserveAlpha?: string | number | undefined;
    preserveAspectRatio?: string | undefined;
    primitiveUnits?: string | number | undefined;
    r?: string | number | undefined;
    radius?: string | number | undefined;
    refX?: string | number | undefined;
    refY?: string | number | undefined;
    renderingIntent?: string | number | undefined;
    repeatCount?: string | number | undefined;
    repeatDur?: string | number | undefined;
    requiredExtensions?: string | number | undefined;
    requiredFeatures?: string | number | undefined;
    restart?: string | number | undefined;
    result?: string | undefined;
    rx?: string | number | undefined;
    ry?: string | number | undefined;
    seed?: string | number | undefined;
    slope?: string | number | undefined;
    spacing?: string | number | undefined;
    specularConstant?: string | number | undefined;
    specularExponent?: string | number | undefined;
    speed?: string | number | undefined;
    spreadMethod?: string | undefined;
    startOffset?: string | number | undefined;
    stdDeviation?: string | number | undefined;
    stemh?: string | number | undefined;
    stemv?: string | number | undefined;
    stitchTiles?: string | number | undefined;
    strikethroughPosition?: string | number | undefined;
    strikethroughThickness?: string | number | undefined;
    surfaceScale?: string | number | undefined;
    systemLanguage?: string | number | undefined;
    tableValues?: string | number | undefined;
    targetX?: string | number | undefined;
    targetY?: string | number | undefined;
    textLength?: string | number | undefined;
    to?: string | number | undefined;
    u1?: string | number | undefined;
    u2?: string | number | undefined;
    underlinePosition?: string | number | undefined;
    underlineThickness?: string | number | undefined;
    unicode?: string | number | undefined;
    unicodeRange?: string | number | undefined;
    unitsPerEm?: string | number | undefined;
    vAlphabetic?: string | number | undefined;
    values?: string | undefined;
    version?: string | undefined;
    vertAdvY?: string | number | undefined;
    vertOriginX?: string | number | undefined;
    vertOriginY?: string | number | undefined;
    vHanging?: string | number | undefined;
    vIdeographic?: string | number | undefined;
    viewBox?: string | undefined;
    viewTarget?: string | number | undefined;
    vMathematical?: string | number | undefined;
    widths?: string | number | undefined;
    x1?: string | number | undefined;
    x2?: string | number | undefined;
    x?: string | number | undefined;
    xChannelSelector?: string | undefined;
    xHeight?: string | number | undefined;
    xlinkActuate?: string | undefined;
    xlinkArcrole?: string | undefined;
    xlinkHref?: string | undefined;
    xlinkRole?: string | undefined;
    xlinkShow?: string | undefined;
    xlinkTitle?: string | undefined;
    xlinkType?: string | undefined;
    xmlBase?: string | undefined;
    xmlLang?: string | undefined;
    xmlns?: string | undefined;
    xmlnsXlink?: string | undefined;
    xmlSpace?: string | undefined;
    y1?: string | number | undefined;
    y2?: string | number | undefined;
    y?: string | number | undefined;
    yChannelSelector?: string | undefined;
    z?: string | number | undefined;
    zoomAndPan?: string | undefined;
    nativeColor?: string | undefined;
    titleAccess?: string | undefined;
} & {
    theme?: DefaultTheme | undefined;
}>>;
export default _default;
//# sourceMappingURL=Trending.d.ts.map