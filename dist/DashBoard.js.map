{"version":3,"sources":["../src/lib/DashBoard.tsx"],"names":["React","GridList","GridListTile","Paper","BackgroundPaper","background","props","WidgetContainer","styled","Widget","state","dragging","dragOver","onDrop","e","stopPropagation","preventDefault","data","JSON","parse","dataTransfer","getData","index","onOrder","err","setState","onDragStart","dragData","setData","stringify","onDragEnd","onDragEnter","onDragOver","onDragLeave","children","border","PureComponent","defaultProps","sizeMap","small","cols","rows","medium","large","DashBoard","onOrderArray","target","source","widgets","splice","onChangeOrder","spacing","width","map","i","size","widget"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components/macro'\n\nimport GridList from '@material-ui/core/GridList'\nimport GridListTile from '@material-ui/core/GridListTile'\nimport Paper, {PaperProps} from '@material-ui/core/Paper'\n\nconst BackgroundPaper = ({background, ...props}: { background: string } & PaperProps) => (<Paper {...props} />)\nconst WidgetContainer = styled(BackgroundPaper)`&&{\n    background: ${({background}) => background};\n    width: 100%;\n    height: 100%;\n}`\n\ntype WidgetSize = 'small' | 'medium' | 'large'\n\ntype WidgetBaseProps = {\n    index: number\n    background?: string\n    onOrder: (index: number, sourceIndex: number) => void\n    children: React.ReactChild // allow only one child\n}\n\ntype DragDropData = {\n    index: number\n}\n\ntype WidgetState = {\n    dragging: boolean\n    dragOver: boolean\n}\n\nclass Widget extends React.PureComponent<WidgetBaseProps, WidgetState>{\n    static defaultProps = {\n        background: 'inherit'\n    }\n    static propTypes = {\n        index: PropTypes.number.isRequired,\n        background: PropTypes.string,\n        onOrder: PropTypes.func.isRequired,\n        children: PropTypes.node.isRequired\n    }\n\n    state: WidgetState = {\n        dragging: false,\n        dragOver: false,\n    }\n\n    onDrop = (e: React.DragEvent<HTMLDivElement>) => {\n        e.stopPropagation()\n        e.preventDefault()\n\n        try{\n            const data = JSON.parse(e.dataTransfer.getData('text')) as DragDropData\n            if(data.index !== this.props.index){ this.props.onOrder(this.props.index, data.index) }\n        }catch(err){ }\n        this.setState({dragOver: false})\n    }\n\n    onDragStart = (e: React.DragEvent<HTMLDivElement | SVGSVGElement>) => {\n        const dragData: DragDropData = {\n            index: this.props.index\n        }\n        e.dataTransfer.setData('text', JSON.stringify(dragData))\n        this.setState({dragging: true})\n    }\n\n    onDragEnd = (e: React.DragEvent<HTMLDivElement | SVGSVGElement>) => {\n        this.setState({dragging: false})\n    }\n\n    onDragEnter = (e: React.DragEvent<HTMLDivElement>) => {\n        this.setState({dragOver: true})\n    }\n\n    onDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n        e.preventDefault()\n    }\n\n    onDragLeave = (e: React.DragEvent<HTMLDivElement>) => {\n        this.setState({dragOver: false})\n    }\n\n    render(){\n        const {children, background} = this.props\n\n        return (\n            <WidgetContainer\n                background={background || 'inherit'}\n                elevation={0}\n                style={{\n                    // TODO: other design??\n                    border: this.state.dragOver ? '2px dashed #333' : 'unset',\n                }}\n                draggable\n                onDragStart={this.onDragStart}\n                onDragEnd={this.onDragEnd}\n                onDragEnter={this.onDragEnter}\n                onDragOver={this.onDragOver}\n                onDragLeave={this.onDragLeave}\n                onDrop={this.onDrop}\n            >\n                {children}\n            </WidgetContainer>\n        )\n    }\n}\n\nconst sizeMap: {[P in WidgetSize]: {cols: number, rows: number}} = {\n    small: {cols: 1, rows: 0.5},\n    medium: {cols: 2, rows: 1},\n    large: {cols: 4, rows: 2}\n}\n\nexport type WidgetProps = {\n    size: WidgetSize\n    minSize?: WidgetSize\n} & Pick<WidgetBaseProps, 'background' | 'children'>\n\nexport type DashBoardProps = {\n    widgets: Array<WidgetProps>\n    onChangeOrder: (widgets: Array<WidgetProps>) => void\n    onRemove: (something) => void\n    spacing?: number // GridListProps['spacing']\n    children?: undefined // don't allow any children\n}\n\nexport default class DashBoard extends React.PureComponent<DashBoardProps>{\n    static defaultProps = {\n        spacing: 16\n    }\n\n    static propTypes = {\n        onChangeOrder: PropTypes.func.isRequired,\n        onRemove: PropTypes.func.isRequired,\n        spacing: PropTypes.number,\n        widgets: PropTypes.arrayOf(PropTypes.shape({\n            background: PropTypes.string,\n            children: PropTypes.node.isRequired,\n            minSize: PropTypes.oneOf(['small', 'medium', 'large']),\n            size: PropTypes.oneOf(['small', 'medium', 'large']).isRequired\n        })),\n        // children: PropTypes. //TODO: Check that children is undefined\n    }\n\n    onOrderArray = (target: number, source: number) => {\n        const widgets = [...this.props.widgets]\n        widgets.splice(target, 0, widgets.splice(source, 1)[0])\n        this.props.onChangeOrder(widgets)\n    }\n\n    render(){\n        return (\n            <GridList\n                spacing={this.props.spacing}\n                cols={4}\n                cellHeight={250}\n                style={{width: '100%'}}\n            >\n                {this.props.widgets.map(({size, ...widget}, i) => (\n                    <GridListTile key={i} {...sizeMap[size]} >\n                        <Widget {...widget}\n                            index={i}\n                            onOrder={this.onOrderArray}\n                        />\n                    </GridListTile>\n                ))}\n            </GridList>\n        )\n    }\n}"],"file":"DashBoard.js"}