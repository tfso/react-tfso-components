{"version":3,"sources":["../src/lib/ListPicker.tsx"],"names":["React","Dialog","DialogContent","Slide","Typography","MenuList","MenuItem","ListItemText","Avatar","SearchField","Popover","styled","IconButton","CloseIcon","withScreenSize","AvatarColor","theme","color","mui","palette","primary","dark","contrastText","CustomDialogTitle","div","TransitionComponent","props","_inputRef","createRef","_listRef","state","filterValue","focusValue","onFilter","event","setState","target","value","onKeyDown","keyCode","current","focus","onSwitch","onClose","onCancel","prevProps","open","screenSize","mobile","setTimeout","renderItems","searchLabel","options","filter","option","label","toLowerCase","indexOf","map","i","disabled","selected","avatarColor","split","slice","words","desktopDialog","anchorEl","vertical","horizontal","mobileDialog","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport Slide from '@material-ui/core/Slide'\nimport Typography from '@material-ui/core/Typography'\nimport MenuList from '@material-ui/core/MenuList'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Avatar from '@material-ui/core/Avatar'\nimport SearchField from './SearchField'\nimport Popover from '@material-ui/core/Popover'\nimport styled from 'styled-components'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloseIcon from '@material-ui/icons/Close'\nimport {InjectedScreenSizeProps, withScreenSize} from './ScreenSize'\n\nexport type ClientSwitcherDialogProps = {\n    open: boolean\n    onCancel: () => void\n    onSwitch: (value: string) => void\n    children?: undefined\n    options: {value: string, label: string}[]\n    cancelButtonText: string\n    searchLabel?: string\n    anchorEl?: null | HTMLElement\n    disabled?: string\n    selected?: string\n    avatarColor?: string\n}\n\ntype State = {\n    filterValue: string,\n    focusValue: string\n}\n\nconst AvatarColor = styled(Avatar)`\n  &&{\n    background-color: ${({theme, color}) => color || theme.mui.palette.primary.dark}\n    color: ${({theme}) => theme.mui.palette.primary.contrastText}\n  }\n` as typeof Avatar\n\nconst CustomDialogTitle = styled.div`\n  display: flex;\n  flex-flow: row-reverse;\n  padding: 5px;\n`\n\nconst TransitionComponent = props => <Slide direction='down' {...props} />\n\n// @ts-ignore\nexport default withScreenSize(class ListPicker extends React.PureComponent<ClientSwitcherDialogProps & InjectedScreenSizeProps, State>{\n    static propTypes = {\n        open: PropTypes.bool.isRequired,\n        onCancel: PropTypes.func.isRequired,\n        onSwitch: PropTypes.func.isRequired,\n        options: PropTypes.arrayOf(PropTypes.shape({value: PropTypes.string.isRequired, label: PropTypes.string.isRequired})).isRequired,\n        cancelButtonText: PropTypes.string.isRequired,\n        searchLabel: PropTypes.string,\n        disabled: PropTypes.string,\n        selected: PropTypes.string,\n        avatarColor: PropTypes.string\n    }\n    _inputRef: React.RefObject<HTMLLIElement> = React.createRef()\n    _listRef: React.RefObject<HTMLInputElement> = React.createRef()\n    state: State = {\n        filterValue: '',\n        focusValue: ''\n    }\n\n    componentDidUpdate(prevProps){\n        if(!prevProps.open && this.props.open && !this.props.screenSize.mobile){\n            setTimeout(() => {\n                this._inputRef.current && this._inputRef.current.focus()\n            }, 1)\n        }\n    }\n\n    onFilter = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({filterValue: event.target.value})\n    }\n    onKeyDown = (event: React.KeyboardEvent) => {\n        if(!(event && event.keyCode === 40)){\n            return\n        }\n        this._listRef.current && this._listRef.current.focus()\n    }\n\n    onSwitch = (value) => {\n        this.props.onSwitch(value)\n    }\n\n    onClose = () => {\n        this.props.onCancel()\n    }\n\n    render(){\n        const renderItems = (\n            <>\n                <SearchField\n                    placeholder={this.props.searchLabel}\n                    inputRef={this._inputRef}\n                    onChange={this.onFilter}\n                    value={this.state.filterValue}\n                    onKeyDown={this.onKeyDown}\n                />\n                <\n                    // @ts-ignore\n                    MenuList ref={this._listRef}>\n                    {this.props.options\n                        .filter(option => option.label.toLowerCase().indexOf(this.state.filterValue) > -1 || option.value.indexOf(this.state.filterValue) > -1)\n                        .map((option, i) => (\n                            <MenuItem\n                                disabled={option.value == this.props.disabled}\n                                selected={option.value == this.props.selected}\n                                key={i}\n                                onClick={() => { this.onSwitch(option.value) }}\n                            >\n                                <AvatarColor color={this.props.avatarColor}>\n                                    <Typography variant='caption' color='inherit'>\n                                        {option.label.split(' ')\n                                            .slice(0, 3)\n                                            .map((words) => (\n                                                words[0]\n                                            ))\n                                        }\n                                    </Typography>\n                                </AvatarColor>\n                                <ListItemText primary={option.label} />\n                            </MenuItem>\n                        ))\n                    }\n                </MenuList>\n            </>\n        )\n\n        const desktopDialog = (\n            <Popover\n                anchorEl={this.props.anchorEl}\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'left',\n                }}\n                open={this.props.open}\n                onClose={this.onClose}\n            >\n                <DialogContent>\n                    {renderItems}\n                </DialogContent>\n            </Popover>\n        )\n\n        const mobileDialog = (\n            <Dialog\n                TransitionComponent={TransitionComponent}\n                keepMounted={false}\n                fullScreen={true}\n                open={this.props.open}\n                onClose={this.onClose}\n                fullWidth\n                maxWidth='sm'\n            >\n                <CustomDialogTitle>\n                    <IconButton onClick={this.onClose} aria-label=\"Close\">\n                        <CloseIcon />\n                    </IconButton>\n                </CustomDialogTitle>\n                <DialogContent>\n                    {renderItems}\n                </DialogContent>\n            </Dialog>\n        )\n\n        const {mobile} = this.props.screenSize\n        return mobile ? mobileDialog : desktopDialog\n    }\n})"],"file":"ListPicker.js"}