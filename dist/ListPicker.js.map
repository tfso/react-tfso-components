{"version":3,"sources":["../src/lib/ListPicker.tsx"],"names":["React","Dialog","DialogContent","Slide","Typography","MenuList","MenuItem","ListItemText","Avatar","SearchField","Popover","styled","IconButton","CloseIcon","withScreenSize","LinearProgress","AvatarColor","theme","color","tfso","colors","menu","mui","palette","primary","contrastText","CustomDialogTitle","div","TransitionComponent","props","_inputRef","createRef","_listRef","state","filterValue","focusValue","onFilter","event","setState","target","value","onKeyDown","keyCode","current","focus","onSelect","onClose","onCancel","prevProps","open","screenSize","mobile","setTimeout","renderLinearProgress","loading","renderItems","searchLabel","options","filter","option","label","toLowerCase","indexOf","toLocaleLowerCase","map","i","disabled","selected","avatarColor","split","slice","words","desktopDialog","anchorEl","vertical","horizontal","mobileDialog","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport Slide from '@material-ui/core/Slide'\nimport Typography from '@material-ui/core/Typography'\nimport MenuList from '@material-ui/core/MenuList'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Avatar from '@material-ui/core/Avatar'\nimport SearchField from './SearchField'\nimport Popover from '@material-ui/core/Popover'\nimport styled from 'styled-components'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloseIcon from '@material-ui/icons/Close'\nimport {InjectedScreenSizeProps, withScreenSize} from './ScreenSize'\nimport LinearProgress from '@material-ui/core/LinearProgress'\n\nexport type ListPickerProps = {\n    open: boolean\n    onCancel: () => void\n    onSelect: (value: string) => void\n    children?: undefined\n    options: {value: string, label: string}[]\n    cancelButtonText: string\n    searchLabel?: string\n    anchorEl?: null | HTMLElement\n    disabled?: string\n    selected?: string\n    avatarColor?: string\n    loading?: boolean\n}\n\ntype State = {\n    filterValue: string,\n    focusValue: string\n\n}\n\nconst AvatarColor = styled(Avatar)`&&{\n    background-color: ${({theme, color}) => color || theme.tfso.colors.menu};\n    color: ${({theme}) => theme.mui.palette.primary.contrastText};\n}` as typeof Avatar\n\nconst CustomDialogTitle = styled.div`\n  display: flex;\n  flex-flow: row-reverse;\n  padding: 5px;\n`\n\nconst TransitionComponent = props => <Slide direction='down' {...props} />\n\n// @ts-ignore\nexport default withScreenSize(class ListPicker extends React.PureComponent<ListPickerProps & InjectedScreenSizeProps, State>{\n    static propTypes = {\n        open: PropTypes.bool.isRequired,\n        onCancel: PropTypes.func.isRequired,\n        onSelect: PropTypes.func.isRequired,\n        options: PropTypes.arrayOf(PropTypes.shape({value: PropTypes.string.isRequired, label: PropTypes.string.isRequired})).isRequired,\n        cancelButtonText: PropTypes.string.isRequired,\n        searchLabel: PropTypes.string,\n        disabled: PropTypes.string,\n        selected: PropTypes.string,\n        avatarColor: PropTypes.string,\n        loading: PropTypes.bool\n    }\n    _inputRef: React.RefObject<HTMLLIElement> = React.createRef()\n    _listRef: React.RefObject<HTMLInputElement> = React.createRef()\n    state: State = {\n        filterValue: '',\n        focusValue: ''\n    }\n\n    componentDidUpdate(prevProps){\n        if(!prevProps.open && this.props.open && !this.props.screenSize.mobile){\n            setTimeout(() => {\n                this._inputRef.current && this._inputRef.current.focus()\n            }, 1)\n        }\n    }\n\n    onFilter = (event: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({filterValue: event.target.value})\n    }\n    onKeyDown = (event: React.KeyboardEvent) => {\n        if(!(event && event.keyCode === 40)){\n            return\n        }\n        this._listRef.current && this._listRef.current.focus()\n    }\n\n    onSelect = (value) => {\n        this.props.onSelect(value)\n    }\n\n    onClose = () => {\n        this.props.onCancel()\n    }\n\n    render(){\n        const renderLinearProgress = (\n            <>\n            { this.props.loading &&\n                    <LinearProgress color='secondary'/>\n            }\n            </>\n        )\n\n        const renderItems = (\n            <>\n\n                <SearchField\n                    placeholder={this.props.searchLabel}\n                    inputRef={this._inputRef}\n                    onChange={this.onFilter}\n                    value={this.state.filterValue}\n                    onKeyDown={this.onKeyDown}\n                />\n\n                <\n                    // @ts-ignore\n                    MenuList ref={this._listRef}>\n                    {this.props.options\n                        .filter(option => option.label.toLowerCase().indexOf(this.state.filterValue.toLocaleLowerCase()) > -1 || option.value.indexOf(this.state.filterValue.toLocaleLowerCase()) > -1)\n                        .map((option, i) => (\n                            <MenuItem\n                                disabled={option.value == this.props.disabled}\n                                selected={option.value == this.props.selected}\n                                key={i}\n                                onClick={() => { this.onSelect(option.value) }}\n                            >\n                                <AvatarColor color={this.props.avatarColor == 'default' ? '' : this.props.avatarColor}>\n                                    <Typography variant='caption' color='inherit'>\n                                        {option.label.split(' ')\n                                            .slice(0, 3)\n                                            .map((words) => (\n                                                words[0]\n                                            ))\n                                        }\n                                    </Typography>\n                                </AvatarColor>\n                                <ListItemText primary={option.label} />\n                            </MenuItem>\n                        ))\n                    }\n                </MenuList>\n            </>\n        )\n\n        const desktopDialog = (\n            <Popover\n                anchorEl={this.props.anchorEl}\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'left',\n                }}\n                open={this.props.open}\n                onClose={this.onClose}\n            >\n                {renderLinearProgress}\n                <DialogContent>\n                    {renderItems}\n                </DialogContent>\n            </Popover>\n        )\n\n        const mobileDialog = (\n            <Dialog\n                TransitionComponent={TransitionComponent}\n                keepMounted={false}\n                fullScreen={true}\n                open={this.props.open}\n                onClose={this.onClose}\n                fullWidth\n                maxWidth='sm'\n            >\n                {renderLinearProgress}\n                <CustomDialogTitle>\n                    <IconButton onClick={this.onClose} aria-label=\"Close\">\n                        <CloseIcon />\n                    </IconButton>\n                </CustomDialogTitle>\n                <DialogContent>\n                    {renderItems}\n                </DialogContent>\n            </Dialog>\n        )\n\n        const {mobile} = this.props.screenSize\n        return mobile ? mobileDialog : desktopDialog\n    }\n})"],"file":"ListPicker.js"}