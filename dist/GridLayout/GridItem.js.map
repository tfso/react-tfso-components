{"version":3,"sources":["../../src/lib/GridLayout/GridItem.tsx"],"names":["React","DraggableCore","setTransform","classNames","GridItem","state","dragging","col","row","width","height","props","margin","containerPadding","rowHeight","colWidth","out","left","Math","round","top","Infinity","max","cols","w","x","y","min","child","onDragHandler","handlerName","e","node","deltaX","deltaY","handler","newPosition","offsetParent","parentRect","getBoundingClientRect","clientRect","scrollLeft","scrollTop","setState","Error","calcXY","call","id","draggable","pos","calcPosition","Children","only","children","newChild","cloneElement","className","static","cssTransforms","Boolean","style","mixinDraggable","Component","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport {DraggableCore} from 'react-draggable'\nimport {\n    setTransform,\n    PartialPosition,\n    ReactDraggableCallbackData,\n    GridDragEvent,\n    Position} from './utils'\nimport classNames from 'classnames'\n\ntype GridItemCallback<TData extends GridDragEvent> = (\n    id: string,\n    width: number,\n    height: number,\n    data: TData\n) => void\n\ntype State = {\n    dragging: PartialPosition | null,\n}\n\ntype Props = {\n    children: React.ReactElement<any>,\n    cols: number,\n    colWidth: number,\n    margin: [number, number],\n    containerPadding: [number, number],\n    rowHeight: number,\n    draggable: boolean,\n\n    className: string,\n    style?: Object\n\n    col: number,\n    row: number,\n    width: number,\n    height: number,\n\n    id: string,\n\n    onDrag?: GridItemCallback<GridDragEvent>,\n    onDragStart?: GridItemCallback<GridDragEvent>,\n    onDragStop?: GridItemCallback<GridDragEvent>\n}\n\n/**\n * An individual item within a ReactGridLayout.\n */\nexport default class GridItem extends React.Component<Props, State>{\n    static propTypes = {\n        // Children must be only a single element\n        children: PropTypes.element,\n\n        // General grid attributes\n        cols: PropTypes.number.isRequired,\n        colWidth: PropTypes.number.isRequired,\n        rowHeight: PropTypes.number.isRequired,\n        margin: PropTypes.array.isRequired,\n        containerPadding: PropTypes.array.isRequired,\n\n        // These are all in grid units\n        col: PropTypes.number.isRequired,\n        row: PropTypes.number.isRequired,\n        width: PropTypes.number.isRequired,\n        height: PropTypes.number.isRequired,\n\n        // ID is nice to have for callbacks\n        id: PropTypes.string.isRequired,\n\n        // Functions\n        onDragStop: PropTypes.func,\n        onDragStart: PropTypes.func,\n        onDrag: PropTypes.func,\n\n        // Flags\n        draggable: PropTypes.bool.isRequired,\n\n        // Others\n        className: PropTypes.string,\n    }\n\n    static defaultProps = {\n        className: ''\n    }\n\n    state: State = {\n        dragging: null,\n    }\n\n    /**\n     * Return position on the page given an x, y, w, h.\n     * left, top, width, height are all in pixels.\n     * @param  {Number}  col             X coordinate in grid units.\n     * @param  {Number}  row             Y coordinate in grid units.\n     * @param  {Number}  width             W coordinate in grid units.\n     * @param  {Number}  height             H coordinate in grid units.\n     * @return {Object}                Object containing coords.\n     */\n    calcPosition(\n        col: number,\n        row: number,\n        width: number,\n        height: number,\n        state?: State\n    ): Position{\n        const {margin, containerPadding, rowHeight, colWidth} = this.props\n\n        const out = {\n            left: Math.round((colWidth + margin[0]) * col + containerPadding[0]),\n            top: Math.round((rowHeight + margin[1]) * row + containerPadding[1]),\n            // 0 * Infinity === NaN, which causes problems with resize constraints;\n            // Fix this if it occurs.\n            // Note we do it here rather than later because Math.round(Infinity) causes deopt\n            width:\n                width === Infinity\n                    ? width\n                    : Math.round(colWidth * width + Math.max(0, width - 1) * margin[0]),\n            height:\n                height === Infinity\n                    ? height\n                    : Math.round(rowHeight * height + Math.max(0, height - 1) * margin[1])\n        }\n\n        if(state && state.dragging){\n            out.top = Math.round(state.dragging.top)\n            out.left = Math.round(state.dragging.left)\n        }\n\n        return out\n    }\n\n    /**\n     * Translate x and y coordinates from pixels to grid units.\n     * @param  {Number} top  Top position (relative to parent) in pixels.\n     * @param  {Number} left Left position (relative to parent) in pixels.\n     * @return {Object} x and y in grid units.\n     */\n    calcXY(top: number, left: number): { x: number, y: number }{\n        const {margin, cols, rowHeight, width: w, colWidth} = this.props\n\n        let x = Math.round((left - margin[0]) / (colWidth + margin[0]))\n        let y = Math.round((top - margin[1]) / (rowHeight + margin[1]))\n\n        // Capping\n        x = Math.max(Math.min(x, cols - w), 0)\n        y = Math.max(y, 0)\n\n        return {x, y}\n    }\n\n    mixinDraggable(child: React.ReactElement){\n        return (\n            <DraggableCore\n                onStart={this.onDragHandler('onDragStart') as any}\n                onDrag={this.onDragHandler('onDrag') as any}\n                onStop={this.onDragHandler('onDragStop') as any}\n                cancel=''\n                handle=''\n            >\n                {child}\n            </DraggableCore>\n        )\n    }\n\n    onDragHandler(handlerName: string){\n        return (e: Event, {node, deltaX, deltaY}: ReactDraggableCallbackData) => {\n            const handler = this.props[handlerName]\n            if(!handler) return\n\n            const newPosition: PartialPosition = {top: 0, left: 0}\n\n            // Get new XY\n            switch(handlerName){\n            case 'onDragStart':{\n                // TODO: this wont work on nested parents\n                const {offsetParent} = node\n                if(!offsetParent) return\n                const parentRect = offsetParent.getBoundingClientRect()\n                const clientRect = node.getBoundingClientRect()\n                newPosition.left =\n                    clientRect.left - parentRect.left + offsetParent.scrollLeft\n                newPosition.top =\n                    clientRect.top - parentRect.top + offsetParent.scrollTop\n                this.setState({dragging: newPosition})\n                break\n            }\n            case 'onDrag':\n                if(!this.state.dragging){\n                    throw new Error('onDrag called before onDragStart.')\n                }\n                newPosition.left = this.state.dragging.left + deltaX\n                newPosition.top = this.state.dragging.top + deltaY\n                this.setState({dragging: newPosition})\n                break\n            case 'onDragStop':\n                if(!this.state.dragging){\n                    throw new Error('onDragEnd called before onDragStart.')\n                }\n                newPosition.left = this.state.dragging.left\n                newPosition.top = this.state.dragging.top\n                this.setState({dragging: null})\n                break\n            default:\n                throw new Error(\n                    'onDragHandler called with unrecognized handlerName: ' + handlerName\n                )\n            }\n\n            const {x, y} = this.calcXY(newPosition.top, newPosition.left)\n\n            return handler.call(this, this.props.id, x, y, {e, node, newPosition})\n        }\n    }\n\n    render(){\n        const {\n            col,\n            row,\n            width,\n            height,\n            draggable,\n        } = this.props\n\n        const pos = this.calcPosition(col, row, width, height, this.state)\n        const child = React.Children.only(this.props.children)\n\n        // Create the child element. We clone the existing element but modify its className and style.\n        const newChild = React.cloneElement(child, {\n            className: classNames(\n                'react-grid-item',\n                child.props.className,\n                this.props.className,\n                {\n                    static: false,\n                    cssTransforms: true,\n                    'react-draggable': draggable,\n                    'react-draggable-dragging': Boolean(this.state.dragging),\n                }\n            ),\n            // We can set the width and height on the child, but unfortunately we can't set the position.\n            style: {\n                ...this.props.style,\n                ...child.props.style,\n                ...setTransform(pos)\n            }\n        })\n\n        if(draggable){\n            return this.mixinDraggable(newChild)\n        }\n\n        return newChild\n    }\n}\n"],"file":"GridItem.js"}