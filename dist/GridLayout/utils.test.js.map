{"version":3,"sources":["../../src/lib/GridLayout/utils.test.ts"],"names":["utils","describe","it","expect","constrainCol","toBe","layout","a","id","col","row","width","height","c","b","sortLayoutItems","map","i","toEqual"],"mappings":"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","sourcesContent":["import * as utils from './utils'\n\ndescribe('utils', () => {\n    describe('constrainCol', () => {\n        it('corrects col when out of bounds', () => {\n            expect(utils.constrainCol(-1, 0, 6)).toBe(0)\n            expect(utils.constrainCol(7, 0, 6)).toBe(6)\n        })\n        it('returns 0 when width > columns', () => {\n            expect(utils.constrainCol(0, 7, 6)).toBe(0)\n        })\n        it('returns columns - width when col + width > columns', () => {\n            expect(utils.constrainCol(5, 2, 6)).toBe(4)\n        })\n        it('returns col when col + width is within bounds', () => {\n            expect(utils.constrainCol(1, 3, 4)).toBe(1)\n        })\n    })\n\n    describe('sortLayoutItems', () => {\n        const layout: utils.Layout = {\n            a: {\n                id: 'a',\n                col: 0,\n                row: 0,\n                width: 1,\n                height: 1\n            },\n            c: {\n                id: 'c',\n                col: 0,\n                row: 1,\n                width: 1,\n                height: 1\n            },\n            b: {\n                id: 'b',\n                col: 1,\n                row: 0,\n                width: 1,\n                height: 1\n            },\n        }\n\n        it('sorts items in ascending order', () => {\n            expect(utils.sortLayoutItems(layout, true).map(i => i.id)).toEqual(['a', 'b', 'c'])\n        })\n\n        it('sorts items in descending order', () => {\n            expect(utils.sortLayoutItems(layout, false).map(i => i.id)).toEqual(['c', 'b', 'a'])\n        })\n    })\n\n    // describe('collides', () => {\n    //     const layout: utils.Layout = {\n    //         a: {\n    //             id: 'a',\n    //             col: 0,\n    //             row: 0,\n    //             width: 1,\n    //             height: 1\n    //         },\n    //         c: {\n    //             id: 'c',\n    //             col: 0,\n    //             row: 1,\n    //             width: 1,\n    //             height: 1\n    //         },\n    //         b: {\n    //             id: 'b',\n    //             col: 1,\n    //             row: 0,\n    //             width: 1,\n    //             height: 2 // should collide with c\n    //         },\n    //     }\n    //     it('detects collision when height overlaps', () => {})\n    // })\n})"],"file":"utils.test.js"}