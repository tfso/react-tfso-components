{"version":3,"sources":["../../src/lib/GridLayout/GridLayout.tsx"],"names":["React","isEqual","classNames","autoBindHandlers","bottom","childrenEqual","compact","moveItem","synchronizeLayoutWithChildren","GridItem","GridLayout","props","context","state","activeDrag","layout","children","cols","mounted","oldDragItem","oldLayout","setState","onLayoutMaybeChanged","prevProps","newLayoutBase","undefined","newLayout","nbRow","containerPaddingY","containerPadding","margin","rowHeight","id","layoutItem","col","row","l","placeholder","width","height","onLayoutChange","calcColWidth","child","key","draggable","onDragStop","onDragStart","onDrag","className","style","mergedClassName","mergedStyle","containerHeight","Children","map","processGridItem","PureComponent","displayName"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport isEqual from 'lodash/isEqual'\nimport classNames from 'classnames'\nimport {\n    autoBindHandlers,\n    bottom,\n    childrenEqual,\n    compact,\n    moveItem,\n    synchronizeLayoutWithChildren,\n    Layout,\n    LayoutItem,\n    validateLayout\n} from './utils'\nimport GridItem from './GridItem'\nimport './styles.css'\n\ntype State = {\n    activeDrag: LayoutItem | null\n    layout: Layout\n    mounted: boolean\n    oldDragItem: LayoutItem | null\n    oldLayout: Layout | null\n}\n\nexport type GridLayoutProps = {\n    className?: string\n    style?: React.CSSProperties\n    width: number\n    cols: number\n    layout: Layout\n    margin: [number, number]\n    containerPadding: [number, number] | null\n    rowHeight: number\n    draggable?: boolean\n\n    // Callbacks\n    onLayoutChange?: (layout: Layout) => void\n    children: Array<React.ReactElement>\n}\n\nexport default class GridLayout extends React.PureComponent<GridLayoutProps, State>{\n    static displayName = 'GridLayout'\n\n    static propTypes = {\n        className: PropTypes.string,\n        style: PropTypes.object,\n\n        // This can be set explicitly. If it is not set, it will automatically\n        // be set to the container width. Note that resizes will *not* cause this to adjust.\n        // If you need that behavior, use WidthProvider.\n        width: PropTypes.number.isRequired,\n\n        // # of cols.\n        cols: PropTypes.number.isRequired,\n\n        // layout is an array of object with the format:\n        // {x: Number, y: Number, w: Number, h: Number, i: String}\n        layout: function(props: GridLayoutProps){\n            var layout = props.layout\n            // I hope you're setting the data-grid property on the grid items\n            if(layout === undefined){\n                throw new Error('layout must be defined')\n            }\n            validateLayout(layout, 'layout')\n        },\n\n        // Margin between items [x, y] in px\n        margin: PropTypes.arrayOf(PropTypes.number).isRequired,\n        // Padding inside the container [x, y] in px\n        containerPadding: PropTypes.arrayOf(PropTypes.number).isRequired,\n        // Rows have a static height, but you can change this based on breakpoints if you like\n        rowHeight: PropTypes.number.isRequired,\n\n        draggable: PropTypes.bool,\n\n        // Callback so you can save the layout. Calls after each drag & resize stops.\n        onLayoutChange: PropTypes.func,\n\n        // Children must not have duplicate keys.\n        children: function(props: GridLayoutProps, propName: string){\n            var children = props[propName]\n            // Check children keys for duplicates. Throw if found.\n            var keys = {}\n            React.Children.forEach(children, function(child){\n                if(keys[child.key]){\n                    throw new Error(\n                        'Duplicate child key \\'' +\n                        child.key +\n                        '\\' found!'\n                    )\n                }\n                keys[child.key] = true\n            })\n        }\n    }\n\n    state: State = {\n        activeDrag: null,\n        layout: synchronizeLayoutWithChildren(\n            this.props.layout,\n            this.props.children,\n            this.props.cols\n        ),\n        mounted: false,\n        oldDragItem: null,\n        oldLayout: null\n    }\n\n    constructor(props: GridLayoutProps, context: any){\n        super(props, context)\n        autoBindHandlers(this, [\n            'onDragStart',\n            'onDrag',\n            'onDragStop'\n        ])\n    }\n\n    componentDidMount(){\n        this.setState({mounted: true})\n        // Possibly call back with layout on mount. This should be done after correcting the layout width\n        // to ensure we don't rerender with the wrong width.\n        this.onLayoutMaybeChanged(this.state.layout, this.props.layout)\n    }\n\n    componentDidUpdate(prevProps: Readonly<GridLayoutProps>){\n        const {layout, children, cols} = this.props\n        let newLayoutBase: Layout | undefined\n        if(!isEqual(prevProps.layout, layout)){\n            newLayoutBase = layout\n        }else if(!childrenEqual(prevProps.children, children)){\n            newLayoutBase = this.state.layout\n        }\n\n        if(newLayoutBase !== undefined){\n            const newLayout = synchronizeLayoutWithChildren(newLayoutBase, children, cols)\n            const oldLayout = this.state.layout\n            this.setState({layout: newLayout})\n            this.onLayoutMaybeChanged(newLayout, oldLayout)\n        }\n    }\n\n    /**\n     * Calculates a pixel value for the container.\n     * @return {String} Container height in pixels.\n     */\n    containerHeight(){\n        const nbRow = bottom(this.state.layout)\n        const containerPaddingY = this.props.containerPadding\n            ? this.props.containerPadding[1]\n            : this.props.margin[1]\n        return (\n            nbRow * this.props.rowHeight +\n            (nbRow - 1) * this.props.margin[1] +\n            containerPaddingY * 2 +\n            'px'\n        )\n    }\n\n    /**\n     * When dragging starts\n     * @param {String} id Id of the child\n     * @param {Number} x X position of the move\n     * @param {Number} y Y position of the move\n     * @param {Event} e The mousedown event\n     * @param {Element} node The current dragging DOM element\n     */\n    onDragStart(id: string){\n        const {layout} = this.state\n        var layoutItem = layout[id]\n        if(!layoutItem) return\n\n        this.setState({\n            oldDragItem: {...layoutItem},\n            oldLayout: this.state.layout\n        })\n    }\n\n    /**\n     * Each drag movement create a new dragelement and move the element to the dragged location\n     * @param {String} id Id of the child\n     * @param {Number} col X position of the move\n     * @param {Number} row Y position of the move\n     * @param {Event} e The mousedown event\n     * @param {Element} node The current dragging DOM element\n     */\n    onDrag(id: string, col: number, row: number){\n        let {layout} = this.state\n        const {cols} = this.props\n        var l = layout[id]\n        if(!l) return\n\n        // Create placeholder (display only)\n        var placeholder = {\n            width: l.width,\n            height: l.height,\n            col: l.col,\n            row: l.row,\n            placeholder: true,\n            id: id\n        }\n\n        // Move the element to the dragged location.\n        layout = moveItem(id, layout, col, row, cols)\n\n        this.setState({\n            layout: compact(layout),\n            activeDrag: placeholder\n        })\n    }\n\n    onDragStop(id: string, col: number, row: number){\n        const {oldDragItem} = this.state\n        let {layout} = this.state\n        const {cols} = this.props\n        const l = layout[id]\n        if(!l) return\n\n        // Move the element here\n        layout = moveItem(id, layout, col, row, cols)\n\n        const newLayout = compact(layout)\n        this.setState({\n            activeDrag: null,\n            layout: newLayout,\n            oldDragItem: null,\n            oldLayout: null\n        })\n\n        if(!isEqual(oldDragItem, l)){\n            this.props.onLayoutChange && this.props.onLayoutChange(newLayout)\n        }\n    }\n\n    onLayoutMaybeChanged(newLayout: Layout, oldLayout?: Layout){\n        if(!oldLayout) oldLayout = this.state.layout\n        if(!isEqual(oldLayout, newLayout)){\n            this.props.onLayoutChange && this.props.onLayoutChange(newLayout)\n        }\n    }\n\n    calcColWidth(): number{\n        const {margin, containerPadding, cols, width} = this.props\n        return (\n            (width - margin[0] * (cols - 1) - ((containerPadding && containerPadding[0]) || 0) * 2) / cols\n        )\n    }\n\n    /**\n     * Create a placeholder object.\n     * @return {Element} Placeholder div.\n     */\n    placeholder(): React.ReactElement<any> | null {\n        const {activeDrag} = this.state\n        if(!activeDrag) return null\n        const {\n            cols,\n            margin,\n            containerPadding,\n            rowHeight\n        } = this.props\n\n        // {...this.state.activeDrag} is pretty slow, actually\n        return (\n            <GridItem\n                width={activeDrag.width}\n                height={activeDrag.height}\n                col={activeDrag.col}\n                row={activeDrag.row}\n                id={activeDrag.id}\n                className='react-grid-placeholder'\n                colWidth={this.calcColWidth()}\n                cols={cols}\n                margin={margin}\n                containerPadding={containerPadding || margin}\n                rowHeight={rowHeight}\n                draggable={false}\n            >\n                <div />\n            </GridItem>\n        )\n    }\n\n    /**\n     * Given a grid item, set its style attributes & surround in a <Draggable>.\n     * @param  {Element} child React element.\n     * @return {Element}       Element wrapped in draggable and properly placed.\n     */\n    processGridItem(child: React.ReactElement): React.ReactElement | null | undefined{\n        if(!child || !child.key) return\n        const l = this.state.layout[child.key]\n        if(!l) return null\n        const {\n            cols,\n            margin,\n            containerPadding,\n            rowHeight,\n            draggable\n        } = this.props\n\n        return (\n            <GridItem\n                colWidth={this.calcColWidth()}\n                cols={cols}\n                margin={margin}\n                containerPadding={containerPadding || margin}\n                rowHeight={rowHeight}\n                onDragStop={this.onDragStop}\n                onDragStart={this.onDragStart}\n                onDrag={this.onDrag}\n                draggable={!!draggable}\n                width={l.width}\n                height={l.height}\n                col={l.col}\n                row={l.row}\n                id={l.id}\n            >\n                {child}\n            </GridItem>\n        )\n    }\n\n    render(){\n        const {className, style} = this.props\n\n        const mergedClassName = classNames('react-grid-layout', className)\n        const mergedStyle = {\n            height: this.containerHeight(),\n            ...style\n        }\n\n        return (\n            <div className={mergedClassName} style={mergedStyle}>\n                {React.Children.map(this.props.children, (child: React.ReactElement) =>\n                    this.processGridItem(child)\n                )}\n                {this.placeholder()}\n            </div>\n        )\n    }\n}"],"file":"GridLayout.js"}