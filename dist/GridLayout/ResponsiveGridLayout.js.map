{"version":3,"sources":["../../src/lib/GridLayout/ResponsiveGridLayout.tsx"],"names":["React","isEqual","synchronizeLayoutWithChildren","getBreakpointFromWidth","getColsFromBreakpoint","findOrGenerateResponsiveLayout","GridLayout","ResponsiveGridLayout","state","generateInitialState","onLayoutChange","layout","props","breakpoint","layouts","width","breakpoints","cols","colNo","initialLayout","prevProps","onWidthChange","newLayout","setState","children","margin","containerPadding","onBreakpointChange","onWidthChangeCallback","newBreakpoint","lastBreakpoint","newCols","other","PureComponent"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport isEqual from 'lodash/isEqual'\n\nimport {\n    synchronizeLayoutWithChildren,\n    validateLayout,\n    Layout\n} from './utils'\nimport {\n    getBreakpointFromWidth,\n    getColsFromBreakpoint,\n    findOrGenerateResponsiveLayout,\n} from './responsiveUtils'\nimport GridLayout, {GridLayoutProps} from './GridLayout'\nimport {Breakpoint} from '@material-ui/core/styles/createBreakpoints'\n\ntype Omit<T, K extends string> = Pick<T, Exclude<keyof T, K>>\n\nconst type = obj => Object.prototype.toString.call(obj)\n\ntype State = {\n    layout: Layout,\n    breakpoint: Breakpoint,\n    cols: number\n}\n\nexport type ResponsiveGridLayoutProps = Omit<GridLayoutProps, 'cols' | 'layout' | 'onLayoutChange'> & {\n    breakpoint?: Breakpoint\n    breakpoints: Partial<{ [BP in Breakpoint]: number }>\n    cols: Partial<{ [BP in Breakpoint]: number }>\n    layouts: Partial<{ [BP in Breakpoint]: Layout }>\n\n    onBreakpointChange?: (breakpoint: Breakpoint, cols: number) => void\n    onLayoutChange?: (layout: Layout, breakpoint: Breakpoint, layouts: Partial<{ [BP in Breakpoint]: Layout}>) => void\n    onWidthChange?: (\n        containerWidth: number,\n        margin: [number, number],\n        cols: number,\n        containerPadding: [number, number] | null\n    ) => void\n}\n\nexport default class ResponsiveGridLayout extends React.PureComponent<ResponsiveGridLayoutProps, State>{\n    static propTypes = {\n        breakpoint: PropTypes.string,\n        breakpoints: PropTypes.object,\n        cols: PropTypes.object,\n        layouts(props: ResponsiveGridLayoutProps, propName: string){\n            if(type(props[propName]) !== '[object Object]'){\n                throw new Error(\n                    'Layout property must be an object. Received: ' +\n                    type(props[propName])\n                )\n            }\n            Object.keys(props[propName]).forEach(key => {\n                if(!(key in props.breakpoints)){\n                    throw new Error(\n                        'Expected one of xl, lg, md, sm or xs, received' + key\n                    )\n                }\n                validateLayout(props.layouts[key], 'layouts.' + key)\n            })\n        },\n\n        width: PropTypes.number.isRequired,\n        onBreakpointChange: PropTypes.func,\n        onLayoutChange: PropTypes.func,\n        onWidthChange: PropTypes.func\n    }\n\n    state = this.generateInitialState()\n\n    generateInitialState(): State{\n        const {width, breakpoints, layouts, cols} = this.props\n        const breakpoint = getBreakpointFromWidth(breakpoints, width)\n        const colNo = getColsFromBreakpoint(breakpoint, cols)\n\n        // Get the initial layout. This can tricky; we try to generate one however possible if one doesn't exist\n        // for this layout.\n        const initialLayout = findOrGenerateResponsiveLayout(\n            layouts,\n            breakpoints,\n            breakpoint,\n            breakpoint,\n            colNo\n        )\n\n        return {\n            layout: initialLayout,\n            breakpoint: breakpoint,\n            cols: colNo\n        }\n    }\n\n    componentDidUpdate(prevProps: Readonly<ResponsiveGridLayoutProps>){\n        const {width, breakpoint, breakpoints, cols, layouts} = this.props\n        if(prevProps.width !== width || prevProps.breakpoint !== breakpoint || prevProps.breakpoints !== breakpoints || prevProps.cols !== cols){\n            this.onWidthChange(prevProps)\n        }else if(!isEqual(prevProps.layouts, layouts)){\n            const {breakpoint, cols} = this.state\n            const newLayout = findOrGenerateResponsiveLayout(layouts, breakpoints, breakpoint, breakpoint, cols)\n            this.setState({layout: newLayout})\n        }\n    }\n\n    onLayoutChange = (layout: Layout) => {\n        this.props.onLayoutChange && this.props.onLayoutChange(layout, this.state.breakpoint, {\n            ...this.props.layouts,\n            [this.state.breakpoint]: layout\n        })\n    }\n\n    onWidthChange(prevProps: Readonly<ResponsiveGridLayoutProps>){\n        const {children, breakpoint, breakpoints, margin, containerPadding, width, cols, onLayoutChange, onBreakpointChange, onWidthChange: onWidthChangeCallback} = this.props\n        const layouts = {...this.props.layouts}\n        const newBreakpoint = breakpoint || getBreakpointFromWidth(breakpoints, width)\n        const lastBreakpoint = this.state.breakpoint\n        const newCols = getColsFromBreakpoint(newBreakpoint, cols)\n        if(lastBreakpoint !== newBreakpoint || prevProps.breakpoints !== breakpoints || prevProps.cols !== cols){\n            if(!(lastBreakpoint in layouts)){\n                layouts[lastBreakpoint] = this.state.layout\n            }\n            const newLayout = synchronizeLayoutWithChildren(\n                findOrGenerateResponsiveLayout(layouts, breakpoints, newBreakpoint, lastBreakpoint, newCols),\n                children, newCols\n            )\n\n            layouts[newBreakpoint] = newLayout\n\n            onLayoutChange && onLayoutChange(newLayout, newBreakpoint, layouts)\n            onBreakpointChange && onBreakpointChange(newBreakpoint, newCols)\n            this.setState({breakpoint: newBreakpoint, layout: newLayout, cols: newCols})\n        }\n        onWidthChangeCallback && onWidthChangeCallback(width, margin, newCols, containerPadding)\n    }\n\n    render(){\n        const {\n            breakpoint,\n            breakpoints,\n            cols,\n            layouts,\n            onBreakpointChange,\n            onLayoutChange,\n            onWidthChange,\n            ...other\n        } = this.props\n\n        return (\n            <GridLayout\n                {...other}\n                onLayoutChange={this.onLayoutChange}\n                layout={this.state.layout}\n                cols={this.state.cols}\n            />\n        )\n    }\n}\n"],"file":"ResponsiveGridLayout.js"}