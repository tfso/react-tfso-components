{"version":3,"sources":["../src/lib/Alert.tsx"],"names":["React","styled","CheckCircleIcon","ErrorIcon","InfoIcon","CloseIcon","IconButton","MuiSnackbarContent","WarningIcon","variantIcon","success","warning","error","info","bgColor","variant","palette","alert","primaryLight","SnackbarContent","other","StyledSnack","theme","tfso","Alert","props","message","onClose","Icon","display","alignItems","fontSize","opacity","marginRight"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmC,mBAAnC;AAGA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AAEA,IAAMC,WAAW,GAAG;AAChBC,EAAAA,OAAO,EAAER,eADO;AAEhBS,EAAAA,OAAO,EAAEH,WAFO;AAGhBI,EAAAA,KAAK,EAAET,SAHS;AAIhBU,EAAAA,IAAI,EAAET;AAJU,CAApB;;AAOA,IAAMU,OAAO,GAAG,SAAVA,OAAU,CAACC,OAAD,EAAwBC,OAAxB,EAAqE;AACjF,UAAOD,OAAP;AACA,SAAK,SAAL;AAAgB,aAAOC,OAAO,CAACN,OAAf;;AAChB,SAAK,OAAL;AAAc,aAAOM,OAAO,CAACC,KAAf;;AACd,SAAK,MAAL;AAAa,aAAOD,OAAO,CAACE,YAAf;;AACb,SAAK,SAAL;AAAgB,aAAOF,OAAO,CAACL,OAAf;;AAChB;AAAS,aAAOK,OAAO,CAACE,YAAf;AALT;AAOH,CARD;;AAUA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,MAAEJ,OAAF,QAAEA,OAAF;AAAA,MAAcK,KAAd;;AAAA,SAAyB,oBAAC,kBAAD,EAAwBA,KAAxB,CAAzB;AAAA,CAAxB;;AACA,IAAMC,WAAW,GAAGpB,MAAM,CAACkB,eAAD,CAAT,oBACO;AAAA,MAAEJ,OAAF,SAAEA,OAAF;AAAA,MAAWO,KAAX,SAAWA,KAAX;AAAA,SAAsBR,OAAO,CAACC,OAAD,EAAUO,KAAK,CAACC,IAAN,CAAWP,OAArB,CAA7B;AAAA,CADP,CAAjB;;AAYA,IAAMQ,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAuB;AAAA,MAC1BC,OAD0B,GACGD,KADH,CAC1BC,OAD0B;AAAA,MACjBC,OADiB,GACGF,KADH,CACjBE,OADiB;AAAA,MACRZ,OADQ,GACGU,KADH,CACRV,OADQ;AAEjC,MAAMa,IAAI,GAAGnB,WAAW,CAACM,OAAD,CAAxB;AAEA,SACI,oBAAC,WAAD;AACI,IAAA,OAAO,EAAEA,OADb;AAEI,wBAAiB,iBAFrB;AAGI,IAAA,OAAO,EACH;AAAM,MAAA,EAAE,EAAC,iBAAT;AAA2B,MAAA,KAAK,EAAE;AAACc,QAAAA,OAAO,EAAE,MAAV;AAAkBC,QAAAA,UAAU,EAAE;AAA9B;AAAlC,OACI,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAACC,QAAAA,QAAQ,EAAE,EAAX;AAAeC,QAAAA,OAAO,EAAE,GAAxB;AAA6BC,QAAAA,WAAW,EAAE;AAA1C;AAAb,MADJ,EAEKP,OAFL,CAJR;AASI,IAAA,MAAM,EAAE,CACJ,oBAAC,UAAD;AACI,MAAA,GAAG,EAAC,OADR;AAEI,oBAAW,OAFf;AAGI,MAAA,KAAK,EAAC,SAHV;AAII,MAAA,OAAO,EAAEC;AAJb,OAMI,oBAAC,SAAD;AAAW,MAAA,QAAQ,EAAC;AAApB,MANJ,CADI;AATZ,IADJ;AAsBH,CA1BD;;AAkCA,eAAeH,KAAf","sourcesContent":["import React from 'react'\nimport styled, {DefaultTheme} from 'styled-components'\nimport PropTypes from 'prop-types'\n\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle'\nimport ErrorIcon from '@material-ui/icons/Error'\nimport InfoIcon from '@material-ui/icons/Info'\nimport CloseIcon from '@material-ui/icons/Close'\nimport IconButton from '@material-ui/core/IconButton'\nimport MuiSnackbarContent from '@material-ui/core/SnackbarContent'\nimport WarningIcon from '@material-ui/icons/Warning'\n\nconst variantIcon = {\n    success: CheckCircleIcon,\n    warning: WarningIcon,\n    error: ErrorIcon,\n    info: InfoIcon,\n}\n\nconst bgColor = (variant: AlertVariant, palette: DefaultTheme['tfso']['palette']) => {\n    switch(variant){\n    case 'success': return palette.success\n    case 'error': return palette.alert\n    case 'info': return palette.primaryLight\n    case 'warning': return palette.warning\n    default: return palette.primaryLight\n    }\n}\n\nconst SnackbarContent = ({variant, ...other}) => <MuiSnackbarContent {...other} />\nconst StyledSnack = styled(SnackbarContent)`&&{\n    background-color: ${({variant, theme}) => bgColor(variant, theme.tfso.palette)}\n}`\n\ntype AlertVariant = 'success' | 'warning' | 'error' | 'info'\n\nexport type AlertProps = {\n    message: React.ReactNode\n    onClose(): void\n    variant: AlertVariant\n}\n\nconst Alert = (props: AlertProps) => {\n    const {message, onClose, variant} = props\n    const Icon = variantIcon[variant]\n\n    return (\n        <StyledSnack\n            variant={variant}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <span id=\"client-snackbar\" style={{display: 'flex', alignItems: 'center'}}>\n                    <Icon style={{fontSize: 20, opacity: 0.9, marginRight: 10}} />\n                    {message}\n                </span>\n            }\n            action={[\n                <IconButton\n                    key=\"close\"\n                    aria-label=\"Close\"\n                    color=\"inherit\"\n                    onClick={onClose}\n                >\n                    <CloseIcon fontSize='small' />\n                </IconButton>\n            ]}\n        />\n    )\n}\n\nAlert.propTypes = {\n    message: PropTypes.node.isRequired,\n    onClose: PropTypes.func.isRequired,\n    variant: PropTypes.oneOf(['success', 'warning', 'error', 'info'])\n}\n\nexport default Alert"],"file":"Alert.js"}