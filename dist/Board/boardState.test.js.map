{"version":3,"sources":["../../src/lib/Board/boardState.test.ts"],"names":["boardInit","boardReducer","BoardActionType","describe","it","expect","foo","toEqual","items","activeDrag","oldDragItem","placeholder","boardState","a","key","component","desktop","row","col","rowSpan","colSpan","boardDimensions","colWidth","rowHeight","spacing","width","screenType","state","otherProp","nextState","type","RESET_ITEMS","not","toBe","DRAG_START","dragging","height","left","top","DRAGGING","deltaX","deltaY","nextStateLessThan","nextStateGreaterThan","DRAG_STOP"],"mappings":"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","sourcesContent":["import {boardInit, boardReducer, BoardActionType, BoardState} from './boardState'\nimport {BoardDimensions} from './types'\n\ndescribe('boardState', () => {\n    describe('boardInit', () => {\n        it('sets drag-state to null', () => {\n            expect(boardInit({foo: 'foo'} as any)).toEqual({\n                items: {foo: 'foo'},\n                activeDrag: null,\n                oldDragItem: null,\n                placeholder: null\n            })\n        })\n    })\n    describe('boardReducer', () => {\n        const boardState: BoardState = {\n            items: {\n                a: {\n                    key: 'a',\n                    component: 'a' as any,\n                    desktop: {\n                        row: 0,\n                        col: 0,\n                        rowSpan: 1,\n                        colSpan: 1\n                    }\n                }\n            },\n            placeholder: null,\n            activeDrag: null,\n            oldDragItem: null\n        }\n        const boardDimensions: BoardDimensions = {\n            colWidth: 90,\n            rowHeight: 90,\n            spacing: 16,\n            width: 1000\n        }\n        const screenType = 'desktop'\n\n        describe('RESET_ITEMS', () => {\n            it('sets items', () => {\n                const state = {items: {foo: 'foo'}, otherProp: 'foo'}\n                const nextState = boardReducer(state as any, {type: BoardActionType.RESET_ITEMS, items: {}})\n                expect(nextState.items).toEqual({})\n                expect(nextState.items).not.toBe(state.items)\n                expect(state).not.toBe(nextState)\n                expect(nextState['otherProp']).toBe('foo')\n            })\n            it('does not set items when items are the same', () => {\n                const state = {items: {foo: 'foo'}, otherProp: 'foo'}\n                const nextState = boardReducer(state as any, {type: BoardActionType.RESET_ITEMS, items: state.items as any})\n                expect(nextState).toBe(state)\n            })\n        })\n        describe('DRAG_START', () => {\n            const type = BoardActionType.DRAG_START\n            it('returns same state if the key does not exist in the items', () => {\n                const state = {items: {}}\n                const nextState = boardReducer(state as any, {type, key: 'a'} as any)\n                expect(state).toBe(nextState)\n            })\n            it('sets oldDragItem and activeDrag', () => {\n                const nextState = boardReducer(boardState, {type, key: 'a', screenType, boardDimensions})\n                expect(nextState.oldDragItem).toBe(boardState.items['a'])\n                expect(nextState.activeDrag).toEqual({\n                    dragging: true,\n                    height: 90,\n                    key: 'a',\n                    left: 0,\n                    top: 0,\n                    width: 90\n                })\n            })\n            it('does not set items', () => {\n                const nextState = boardReducer(boardState, {type, key: 'a', screenType, boardDimensions})\n                expect(nextState.items).toBe(boardState.items)\n            })\n            it('does not mutate state', () => {\n                boardReducer(boardState, {type, key: 'a', screenType, boardDimensions})\n                expect(boardState).toEqual({\n                    items: {\n                        a: {\n                            key: 'a',\n                            component: 'a' as any,\n                            desktop: {\n                                row: 0,\n                                col: 0,\n                                rowSpan: 1,\n                                colSpan: 1\n                            }\n                        }\n                    },\n                    placeholder: null,\n                    activeDrag: null,\n                    oldDragItem: null\n                })\n            })\n        })\n        describe('DRAGGING', () => {\n            const type = BoardActionType.DRAGGING\n            it('returns the same state if activeDrag is null', () => {\n                const state = boardReducer(boardState, {type, deltaX: 1, deltaY: 2, boardDimensions, screenType})\n                expect(state).toBe(boardState)\n            })\n            it('returns the same state if deltaX and deltaY is 0', () => {\n                const state = {\n                    ...boardState,\n                    activeDrag: {\n                        dragging: true,\n                        height: 90,\n                        key: 'a',\n                        left: 0,\n                        top: 0,\n                        width: 90\n                    }\n                }\n                const nextState = boardReducer(state, {type, deltaX: 0, deltaY: 0, boardDimensions, screenType})\n                expect(nextState).toBe(state)\n            })\n            it('constrains movement to within the boards bounds', () => {\n                const state = {\n                    ...boardState,\n                    activeDrag: {\n                        dragging: true,\n                        height: 90,\n                        key: 'a',\n                        left: 0,\n                        top: 0,\n                        width: 90\n                    }\n                }\n                const nextStateLessThan = boardReducer(state, {type, deltaX: -20, deltaY: -20, boardDimensions, screenType})\n                const nextStateGreaterThan = boardReducer(state, {type, deltaX: 1020, deltaY: -20, boardDimensions, screenType})\n                expect(nextStateLessThan.activeDrag).toEqual(state.activeDrag)\n                expect(nextStateGreaterThan.activeDrag).toEqual({...state.activeDrag, left: 910})\n            })\n            it('compacts items', () => {\n                const state = {\n                    ...boardState,\n                    activeDrag: {\n                        dragging: true,\n                        height: 90,\n                        key: 'a',\n                        left: 0,\n                        top: 0,\n                        width: 90\n                    }\n                }\n                const nextState = boardReducer(state, {type, deltaY: 300, deltaX: 0, boardDimensions, screenType})\n                expect(nextState.placeholder!.top).toBe(0)\n                expect(nextState.activeDrag!.top).toBe(300)\n            })\n            it('does not mutate state', () => {\n                const state = {\n                    ...boardState,\n                    activeDrag: {\n                        dragging: true,\n                        height: 90,\n                        key: 'a',\n                        left: 0,\n                        top: 0,\n                        width: 90\n                    }\n                }\n                const nextState = boardReducer(state, {type, deltaX: 1, deltaY: 2, boardDimensions, screenType})\n                expect(state).toEqual({\n                    items: {\n                        a: {\n                            key: 'a',\n                            component: 'a' as any,\n                            desktop: {\n                                row: 0,\n                                col: 0,\n                                rowSpan: 1,\n                                colSpan: 1\n                            }\n                        }\n                    },\n                    placeholder: null,\n                    activeDrag: {\n                        dragging: true,\n                        height: 90,\n                        key: 'a',\n                        left: 0,\n                        top: 0,\n                        width: 90\n                    },\n                    oldDragItem: null\n                })\n                expect(nextState).not.toBe(state)\n            })\n        })\n        describe('DRAG_STOP', () => {\n            const type = BoardActionType.DRAG_STOP\n            it('returns the same state if activeDrag is null', () => {\n                const state = boardReducer(boardState, {type, boardDimensions, screenType})\n                expect(state).toBe(boardState)\n            })\n            it('returns the same items if the oldDragItem is equal to item that was dragged', () => {\n                const state = {\n                    ...boardState,\n                    oldDragItem: {...boardState.items['a']}, // copy to make sure that isEqual is used and not ===\n                    activeDrag: {\n                        dragging: true,\n                        height: 90,\n                        key: 'a',\n                        left: 30, // snaps back where it was\n                        top: 500, // should be compacted down\n                        width: 90\n                    }\n                }\n                const nextState = boardReducer(state, {type, boardDimensions, screenType})\n                expect(nextState).toEqual(boardState)\n                expect(nextState.items).toBe(boardState.items)\n            })\n            it('returns new items if item was moved', () => {\n                const state = {\n                    ...boardState,\n                    activeDrag: {\n                        dragging: true,\n                        height: 90,\n                        key: 'a',\n                        left: 70, // snaps 1 col to the right\n                        top: 0, // should be compacted down\n                        width: 90\n                    }\n                }\n                const nextState = boardReducer(state, {type, boardDimensions, screenType})\n                expect(nextState.items['a'].desktop.col).toBe(1)\n                expect(nextState.items).not.toBe(boardState.items)\n            })\n            it('compacts items', () => {\n                // dragStop must also compact since it's creating a new layout based on the activeDrag, which may be held with a lot of free space above.\n                const state = {\n                    ...boardState,\n                    activeDrag: {\n                        dragging: true,\n                        height: 90,\n                        key: 'a',\n                        left: 70, // is moved 1 col to the right\n                        top: 500, // this movement is compacted away, but the item was nonetheless moved\n                        width: 90\n                    }\n                }\n                const nextState = boardReducer(state, {type, boardDimensions, screenType})\n                expect(nextState.items['a'].desktop).toEqual({\n                    col: 1,\n                    row: 0,\n                    colSpan: 1,\n                    rowSpan: 1\n                })\n            })\n            it('does not mutate state', () => {\n                const state = {\n                    ...boardState,\n                    activeDrag: {\n                        dragging: true,\n                        height: 90,\n                        key: 'a',\n                        left: 70,\n                        top: 0,\n                        width: 90\n                    }\n                }\n                boardReducer(state, {type, boardDimensions, screenType})\n                expect(state).toEqual({\n                    ...boardState,\n                    activeDrag: {\n                        dragging: true,\n                        height: 90,\n                        key: 'a',\n                        left: 70,\n                        top: 0,\n                        width: 90\n                    }\n                })\n            })\n        })\n    })\n})"],"file":"boardState.test.js"}