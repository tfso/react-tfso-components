{"version":3,"sources":["../../src/lib/board/boardState.ts"],"names":["calculateItemDimensions","calculateItemLayout","compact","moveItem","isEqual","BoardActionType","boardInit","items","placeholder","oldDragItem","activeDrag","boardReducer","state","action","type","DRAG_START","key","screenType","boardDimensions","item","dimensions","dragging","DRAGGING","deltaX","deltaY","top","Math","max","left","min","width","itemLayout","newDragItem","newItems","col","row","DRAG_STOP","RESET_ITEMS"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {BoardItems, ScreenType, BoardItem, BoardDimensions} from './types'\nimport {calculateItemDimensions, calculateItemLayout, compact, moveItem} from './utils'\nimport {BoardItemContainerProps} from './BoardItemContainer'\nimport {BoardItemPlaceholderProps} from './BoardItemPlaceholder'\nimport isEqual from 'lodash/isEqual'\n\nexport type BoardState = {\n    items: BoardItems\n    activeDrag: BoardItemContainerProps & {key: React.Key} | null\n    oldDragItem: BoardItem | null\n    placeholder: BoardItemPlaceholderProps | null\n}\n\nexport enum BoardActionType { 'DRAG_START' = 'DRAG_START', 'DRAGGING' = 'DRAGGING', 'DRAG_STOP' = 'DRAG_STOP', 'RESET_ITEMS' = 'RESET_ITEMS' }\n\ntype DragActionArgs = {\n    screenType: ScreenType\n    boardDimensions: BoardDimensions\n}\n\ntype ActionDragStart = {\n    type: BoardActionType.DRAG_START\n    key: React.Key\n} & DragActionArgs\n\ntype ActionDrag = {\n    type: BoardActionType.DRAGGING\n    deltaX: number\n    deltaY: number\n} & DragActionArgs\n\ntype ActionDragStop = {\n    type: BoardActionType.DRAG_STOP\n} & DragActionArgs\n\ntype ActionResetItems = {\n    type: BoardActionType.RESET_ITEMS\n    items: BoardItems\n}\n\ntype BoardAction = ActionDrag | ActionDragStart | ActionDragStop | ActionResetItems\n\nexport function boardInit(items: BoardItems): BoardState{\n    return {\n        items,\n        placeholder: null,\n        oldDragItem: null,\n        activeDrag: null\n    }\n}\n\nexport function boardReducer(state: BoardState, action: BoardAction): BoardState{\n    switch(action.type){\n    case BoardActionType.DRAG_START:{\n        const {key, screenType, boardDimensions} = action\n        const item = state.items[key]\n        if(!item){\n            return state\n        }\n        const dimensions = calculateItemDimensions(item[screenType]!, boardDimensions)\n        return {\n            ...state,\n            oldDragItem: item,\n            activeDrag: {...dimensions, key, dragging: true}\n        }\n    }\n    case BoardActionType.DRAGGING:{\n        const {activeDrag, items} = state\n        const {deltaX, deltaY, boardDimensions, screenType} = action\n        if(!activeDrag || !(deltaX + deltaY)){\n            return state\n        }\n\n        // Constraining movement to within the container bounds\n        const top = Math.max(activeDrag.top + deltaY, 0)\n        const left = Math.min(Math.max(activeDrag.left + deltaX, 0), boardDimensions.width - activeDrag.width)\n\n        const item = {...items[activeDrag.key]}\n        const itemLayout = calculateItemLayout(item[screenType]!, {top, left}, boardDimensions)\n\n        const newDragItem = {...activeDrag, top, left}\n        const newItems = compact(moveItem(newDragItem.key, items, itemLayout.col, itemLayout.row, screenType), screenType)\n        return {\n            ...state,\n            items: newItems,\n            activeDrag: {...activeDrag, top, left},\n            placeholder: calculateItemDimensions(newItems[activeDrag.key][screenType]!, boardDimensions)\n        }\n    }\n    case BoardActionType.DRAG_STOP:{\n        const {activeDrag, items, oldDragItem} = state\n        const {screenType, boardDimensions} = action\n        if(!activeDrag){\n            return state\n        }\n        const {key} = activeDrag\n        const item = {...items[key], [screenType]: calculateItemLayout(items[key][screenType]!, activeDrag, boardDimensions)}\n        if(isEqual(item, oldDragItem)){\n            return {\n                items: state.items,\n                activeDrag: null,\n                placeholder: null,\n                oldDragItem: null\n            }\n        }\n        const newItems = compact({...items, [activeDrag.key]: item}, screenType)\n\n        return {\n            items: newItems,\n            activeDrag: null,\n            placeholder: null,\n            oldDragItem: null,\n        }\n    }\n    case BoardActionType.RESET_ITEMS:\n        return action.items !== state.items ? {\n            ...state,\n            items: action.items\n        } : state\n    default:\n        return state\n    }\n}"],"file":"boardState.js"}