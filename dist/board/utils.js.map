{"version":3,"sources":["../../src/lib/board/utils.ts"],"names":["calculateBoardRows","items","screenType","Object","values","map","item","layout","row","rowSpan","reduce","max","bottomY","calculateBoardHeight","rows","spacing","rowHeight","calculateItemDimensions","colWidth","top","left","col","height","width","colSpan","calculateItemLayout","Math","round","constrainItemLayouts","itemLayouts","layouts","desktop","constrainItemLayout","tablet","mobile","itemLayout","min","getBreakpointFromWidth","breakpoints","sorted","sortBreakpoints","matching","i","length","breakpointName","breakpoint","keys","sort","a","b","collides","bil1","bil2","compact","newLayout","layoutWasChanged","sortedItemLayouts","filter","hasOwnProperty","key","compareBoardItemLayout","itemWasChanged","test","find","otherItem","moveItem","Error","sourceItem","sourceItemLayout","targetItemLayout","targetItem","newItems","collisions","movedItems","Set","collision","collisionLayout","collissionMovedUp","add","moveCollidingItem","source","collidesWith","collissionMovedDown","has","screenTypes","addBoardItem","definedScreenTypes","st","constrainedItem","hideBoardItem","undefined","showBoardItem"],"mappings":"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","sourcesContent":["import {BoardItems, ScreenType, BoardItemDimensions, BoardItemLayout, BoardDimensions, BoardItem} from './types'\nimport {Breakpoint, BreakpointValues} from '@material-ui/core/styles/createBreakpoints'\n\nexport function calculateBoardRows(items: BoardItems, screenType: ScreenType){\n    return Object.values(items)\n        .map((item) => {\n            const layout = item[screenType]\n            return layout\n                ? layout.row + layout.rowSpan\n                : 0\n        })\n        .reduce((max, bottomY) => bottomY > max ? bottomY : max, 0)\n}\n\nexport function calculateBoardHeight(rows: number, spacing: number, rowHeight: number){\n    return rows * rowHeight + (rows - 1) * spacing\n}\n\nexport function calculateItemDimensions(\n    item: BoardItemLayout,\n    {rowHeight, colWidth, spacing}: BoardDimensions\n):BoardItemDimensions{\n    return {\n        top: item.row * (rowHeight + spacing),\n        left: item.col * (colWidth + spacing),\n        height: item.rowSpan * rowHeight + (item.rowSpan - 1) * spacing,\n        width: item.colSpan * colWidth + (item.colSpan - 1) * spacing,\n    }\n}\n\nexport function calculateItemLayout(\n    item: BoardItemLayout,\n    {top, left}: Pick<BoardItemDimensions, 'top' | 'left'>,\n    {rowHeight, colWidth, spacing}: BoardDimensions\n):BoardItemLayout{\n    return {\n        ...item,\n        col: Math.round(left / (colWidth + spacing)),\n        row: Math.round(top / (rowHeight + spacing))\n    }\n}\n\ntype Mutable<T> = {\n    -readonly [P in keyof T]: T[P]\n}\n\nfunction constrainItemLayouts<T extends Pick<BoardItem, 'desktop' | 'tablet' | 'mobile'>>(itemLayouts: T): T{\n    let layouts: Mutable<T> = {\n        ...itemLayouts\n    }\n    if(layouts.desktop){\n        layouts.desktop = constrainItemLayout(layouts.desktop!)\n    }\n    if(layouts.tablet){\n        layouts.tablet = constrainItemLayout(layouts.tablet!)\n    }\n    if(layouts.mobile){\n        layouts.mobile = constrainItemLayout(layouts.mobile!)\n    }\n    return layouts\n}\n\nfunction constrainItemLayout(itemLayout: BoardItemLayout){\n    return {\n        col: Math.max(Math.min(itemLayout.col, 10), 0), // 10 because we have 12 columns, from 0 to 11, and an item needs a minimum of 1 width\n        row: Math.max(itemLayout.row, 0),\n        colSpan: Math.max(Math.min(itemLayout.colSpan, 12), 1),\n        rowSpan: Math.max(itemLayout.rowSpan, 1)\n    }\n}\n\nexport function getBreakpointFromWidth(\n    breakpoints: BreakpointValues,\n    width: number\n): Breakpoint{\n    const sorted = sortBreakpoints(breakpoints)\n    let matching = sorted[0]\n    for(let i = 1; i < sorted.length; i++){\n        const breakpointName = sorted[i]\n        const breakpoint = breakpoints[breakpointName]\n        if(breakpoint && width > breakpoint) matching = breakpointName\n    }\n    return matching\n}\n\nfunction sortBreakpoints(breakpoints: BreakpointValues): Array<Breakpoint>{\n    const keys = Object.keys(breakpoints) as Array<Breakpoint>\n    return keys.sort((a, b) => (breakpoints[a] || 0) - (breakpoints[b] || 0))\n}\n\nfunction collides(bil1?: BoardItemLayout, bil2?: BoardItemLayout){\n    if(!bil1 || !bil2) return false\n    if(bil1.col + bil1.colSpan <= bil2.col) return false\n    if(bil1.col >= bil2.col + bil2.colSpan) return false\n    if(bil1.row + bil1.rowSpan <= bil2.row) return false\n    if(bil1.row >= bil2.row + bil2.rowSpan) return false\n    return true\n}\n\nexport function compact(items: BoardItems, screenType: ScreenType): BoardItems{\n    let newLayout: {[key: string]: BoardItem} = {}\n    let layoutWasChanged = false\n    const sortedItemLayouts = Object.values(items)\n        .filter(item => item.hasOwnProperty(screenType))\n        .map(item => ({key: item.key, ...item[screenType]!}))\n        .sort(compareBoardItemLayout)\n\n    for(let itemLayout of sortedItemLayouts){\n        let itemWasChanged = false\n        while(true){\n            const test = {...itemLayout, row: itemLayout.row - 1}\n            if(test.row < 0 || !!Object.values(newLayout).find(otherItem => collides(otherItem[screenType], test))){\n                break\n            }\n            itemLayout = test\n            itemWasChanged = layoutWasChanged = true\n        }\n        newLayout[itemLayout.key] = itemWasChanged\n            ? {...items[itemLayout.key], [screenType]: itemLayout}\n            : items[itemLayout.key] // don't want to duplicate items.\n    }\n\n    return layoutWasChanged\n        ? newLayout\n        : items\n}\n\nfunction compareBoardItemLayout(a: BoardItemLayout, b: BoardItemLayout){\n    if(a.row > b.row || (a.row === b.row && a.col > b.col)){\n        return 1\n    }else if(a.row === b.row && a.col === b.col){\n        return 0\n    }\n    return -1\n}\n\nexport function moveItem(\n    key: string | number,\n    items: BoardItems,\n    col: number,\n    row: number,\n    screenType: ScreenType\n){\n    if(!items.hasOwnProperty(key)){\n        throw new Error('slutt')\n    }\n\n    const sourceItem = items[key]\n    const sourceItemLayout = sourceItem[screenType]!\n    const targetItemLayout = {...sourceItemLayout, col, row}\n    const targetItem = {...sourceItem, [screenType]: targetItemLayout}\n\n    let newItems = {...items, [targetItem.key]: targetItem}\n    const collisions = Object.values(newItems).filter(otherItem => targetItem.key !== otherItem.key && collides(otherItem[screenType], targetItemLayout))\n\n    if(!collisions.length){\n        return newItems\n    }\n\n    const movedItems = new Set<string | number>([targetItem.key])\n    for(const collision of collisions){\n        const collisionLayout = collision[screenType]!\n        const collissionMovedUp = {\n            ...collision,\n            [screenType]: {\n                ...collisionLayout,\n                row: Math.max(targetItemLayout.row - collisionLayout.rowSpan, 0)\n            }\n        }\n\n        // Can switch places (move collision above target)\n        if(!Object.values(newItems).find(item => item.key !== collision.key && collides(item[screenType], collissionMovedUp[screenType]))){\n            movedItems.add(collision.key)\n            newItems = {...newItems, [collision.key]: collissionMovedUp}\n        }else{\n            newItems = moveCollidingItem(targetItem, collision, newItems, screenType, movedItems)\n        }\n    }\n    return newItems\n}\n\nfunction moveCollidingItem(\n    source: BoardItem,\n    collidesWith: BoardItem,\n    items: BoardItems,\n    screenType: ScreenType,\n    movedItems: Set<string | number>\n){\n    movedItems.add(collidesWith.key)\n\n    const collissionMovedDown = {\n        ...collidesWith,\n        [screenType]: {\n            ...collidesWith[screenType],\n            row: source[screenType]!.row + source[screenType]!.rowSpan\n        }\n    }\n\n    let newItems = {...items, [collissionMovedDown.key]: collissionMovedDown}\n    const collisions = Object.values(newItems)\n        .filter(otherItem => !movedItems.has(otherItem.key) && collides(otherItem[screenType], collissionMovedDown[screenType]))\n\n    if(!collisions.length){\n        return newItems\n    }\n\n    for(const collision of collisions){\n        newItems = moveCollidingItem(collissionMovedDown, collision, newItems, screenType, movedItems)\n    }\n\n    return newItems\n}\n\nconst screenTypes: ScreenType[] = ['mobile', 'tablet', 'desktop']\n\n/**\n * Add a new item to the board\n * @param items Existing items in the board\n * @param item New item to add\n */\nexport function addBoardItem(\n    items: BoardItems,\n    item: BoardItem\n){\n    if(items.hasOwnProperty(item.key)){\n        throw new Error(`Cannot add item with duplicate key '${item.key}'`)\n    }\n\n    const definedScreenTypes = screenTypes\n        .filter(st => item.hasOwnProperty(st))\n\n    if(!definedScreenTypes.length){\n        throw new Error('Cannot add an item with no layout defined for neither mobile, tablet nor desktop')\n    }\n\n    const constrainedItem = constrainItemLayouts(item)\n\n    let newItems = {...items, [constrainedItem.key]: constrainedItem}\n    for(const screenType of definedScreenTypes){\n        const collisions = Object.values(items)\n            .filter(otherItem => constrainedItem.key !== otherItem.key && collides(otherItem[screenType], constrainedItem[screenType]))\n\n        if(!collisions.length){\n            newItems = compact(newItems, screenType)\n            continue\n        }\n\n        const movedItems = new Set<string | number>([constrainedItem.key])\n        for(const collision of collisions){\n            newItems = moveCollidingItem(constrainedItem, collision, newItems, screenType, movedItems)\n        }\n        newItems = compact(newItems, screenType)\n    }\n    return newItems\n}\n\nexport function hideBoardItem(items: BoardItems, key: string, screenType: ScreenType){\n    return compact({\n        ...items,\n        key: {\n            ...items[key],\n            [screenType]: undefined\n        }\n    }, screenType)\n}\n\nexport function showBoardItem(items: BoardItems, key: string, screenType: ScreenType){\n    throw new Error('Not implemtented')\n    // resolve collisions\n}"],"file":"utils.js"}