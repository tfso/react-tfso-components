{"version":3,"sources":["../../src/lib/board/utils.ts"],"names":["calculateBoardRows","items","screenType","Object","values","map","item","layout","row","rowSpan","reduce","max","bottomY","calculateBoardHeight","rows","spacing","rowHeight","calculateItemDimensions","colWidth","top","left","col","height","width","colSpan","calculateItemLayout","Math","round","getBreakpointFromWidth","breakpoints","sorted","sortBreakpoints","matching","i","length","breakpointName","breakpoint","keys","sort","a","b","collides","bil1","bil2","compact","newLayout","layoutWasChanged","sortedItemLayouts","filter","hasOwnProperty","key","compareBoardItemLayout","itemLayout","itemWasChanged","test","find","otherItem","moveItem","Error","sourceItem","sourceItemLayout","targetItemLayout","targetItem","newItems","collisions","movedItems","Set","collision","collisionLayout","collissionMovedUp","add","moveCollidingItem","source","collidesWith","collissionMovedDown","has"],"mappings":"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","sourcesContent":["import {BoardItems, ScreenType, BoardItemDimensions, BoardItemLayout, BoardDimensions, BoardItem} from './types'\nimport {Breakpoint, BreakpointValues} from '@material-ui/core/styles/createBreakpoints'\n\nexport function calculateBoardRows(items: BoardItems, screenType: ScreenType){\n    return Object.values(items)\n        .map((item) => {\n            const layout = item[screenType]\n            return layout\n                ? layout.row + layout.rowSpan\n                : 0\n        })\n        .reduce((max, bottomY) => bottomY > max ? bottomY : max, 0)\n}\n\nexport function calculateBoardHeight(rows: number, spacing: number, rowHeight: number){\n    return rows * rowHeight + (rows - 1) * spacing\n}\n\nexport function calculateItemDimensions(\n    item: BoardItemLayout,\n    {rowHeight, colWidth, spacing}: BoardDimensions\n):BoardItemDimensions{\n    return {\n        top: item.row * (rowHeight + spacing),\n        left: item.col * (colWidth + spacing),\n        height: item.rowSpan * rowHeight + (item.rowSpan - 1) * spacing,\n        width: item.colSpan * colWidth + (item.colSpan - 1) * spacing,\n    }\n}\n\nexport function calculateItemLayout(\n    item: BoardItemLayout,\n    {top, left}: Pick<BoardItemDimensions, 'top' | 'left'>,\n    {rowHeight, colWidth, spacing}: BoardDimensions\n):BoardItemLayout{\n    return {\n        ...item,\n        col: Math.round(left / (colWidth + spacing)),\n        row: Math.round(top / (rowHeight + spacing))\n    }\n}\n\nexport function getBreakpointFromWidth(\n    breakpoints: BreakpointValues,\n    width: number\n): Breakpoint{\n    const sorted = sortBreakpoints(breakpoints)\n    let matching = sorted[0]\n    for(let i = 1; i < sorted.length; i++){\n        const breakpointName = sorted[i]\n        const breakpoint = breakpoints[breakpointName]\n        if(breakpoint && width > breakpoint) matching = breakpointName\n    }\n    return matching\n}\n\nexport function sortBreakpoints(breakpoints: BreakpointValues): Array<Breakpoint>{\n    const keys = Object.keys(breakpoints) as Array<Breakpoint>\n    return keys.sort((a, b) => (breakpoints[a] || 0) - (breakpoints[b] || 0))\n}\n\nexport function collides(bil1?: BoardItemLayout, bil2?: BoardItemLayout){\n    if(!bil1 || !bil2) return false\n    if(bil1.col + bil1.colSpan <= bil2.col) return false\n    if(bil1.col >= bil2.col + bil2.colSpan) return false\n    if(bil1.row + bil1.rowSpan <= bil2.row) return false\n    if(bil1.row >= bil2.row + bil2.rowSpan) return false\n    return true\n}\n\nexport function compact(items: BoardItems, screenType: ScreenType): BoardItems{\n    let newLayout: {[key: string]: BoardItem} = {}\n    let layoutWasChanged = false\n    const sortedItemLayouts = Object.values(items)\n        .filter(item => item.hasOwnProperty(screenType))\n        .map(item => ({key: item.key, ...item[screenType]!}))\n        .sort(compareBoardItemLayout)\n\n    for(let itemLayout of sortedItemLayouts){\n        let itemWasChanged = false\n        while(true){\n            const test = {...itemLayout, row: itemLayout.row - 1}\n            if(test.row < 0 || !!Object.values(newLayout).find(otherItem => collides(otherItem[screenType], test))){\n                break\n            }\n            itemLayout = test\n            itemWasChanged = layoutWasChanged = true\n        }\n        newLayout[itemLayout.key] = itemWasChanged\n            ? {...items[itemLayout.key], [screenType]: itemLayout}\n            : items[itemLayout.key] // don't want to duplicate items.\n    }\n\n    return layoutWasChanged\n        ? newLayout\n        : items\n}\n\nexport function compareBoardItemLayout(a: BoardItemLayout, b: BoardItemLayout){\n    if(a.row > b.row || (a.row === b.row && a.col > b.col)){\n        return 1\n    }else if(a.row === b.row && a.col === b.col){\n        return 0\n    }\n    return -1\n}\n\nexport function moveItem(\n    key: string | number,\n    items: BoardItems,\n    col: number,\n    row: number,\n    screenType: ScreenType\n){\n    if(!items.hasOwnProperty(key)){\n        throw new Error('slutt')\n    }\n\n    const sourceItem = items[key]\n    const sourceItemLayout = sourceItem[screenType]!\n    const targetItemLayout = {...sourceItemLayout, col, row}\n    const targetItem = {...sourceItem, [screenType]: targetItemLayout}\n\n    let newItems = {...items, [sourceItem.key]: targetItem}\n    const collisions = Object.values(newItems).filter(otherItem => targetItem.key !== otherItem.key && collides(otherItem[screenType], targetItemLayout))\n\n    if(!collisions.length){\n        return newItems\n    }\n\n    const movedItems = new Set<string | number>([sourceItem.key])\n    for(const collision of collisions){\n        const collisionLayout = collision[screenType]!\n        const collissionMovedUp = {\n            ...collision,\n            [screenType]: {\n                ...collisionLayout,\n                row: Math.max(targetItemLayout.row - collisionLayout.rowSpan, 0)\n            }\n        }\n\n        // Can switch places (move collision above target)\n        if(!Object.values(newItems).find(item => collides(item[screenType], collissionMovedUp[screenType]))){\n            movedItems.add(collision.key)\n            newItems = {...newItems, [collision.key]: collissionMovedUp}\n        }else{\n            newItems = moveCollidingItem(targetItem, collision, newItems, screenType, movedItems)\n        }\n    }\n    return newItems\n}\n\nfunction moveCollidingItem(\n    source: BoardItem,\n    collidesWith: BoardItem,\n    items: BoardItems,\n    screenType: ScreenType,\n    movedItems: Set<string | number>\n){\n    movedItems.add(collidesWith.key)\n\n    const collissionMovedDown = {\n        ...collidesWith,\n        [screenType]: {\n            ...collidesWith[screenType],\n            row: source[screenType]!.row + source[screenType]!.rowSpan\n        }\n    }\n\n    let newItems = {...items, [collissionMovedDown.key]: collissionMovedDown}\n    const collisions = Object.values(newItems)\n        .filter(otherItem => !movedItems.has(otherItem.key) && collides(otherItem[screenType], collissionMovedDown[screenType]))\n\n    if(!collisions.length){\n        return newItems\n    }\n\n    for(const collision of collisions){\n        newItems = moveCollidingItem(collissionMovedDown, collision, newItems, screenType, movedItems)\n    }\n\n    return newItems\n}"],"file":"utils.js"}