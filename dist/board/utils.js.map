{"version":3,"sources":["../../src/lib/board/utils.ts"],"names":["calculateBoardRows","items","screenType","Object","values","map","item","layout","row","rowSpan","reduce","max","bottomY","calculateBoardHeight","rows","spacing","rowHeight","calculateItemDimensions","colWidth","top","left","col","height","width","colSpan","calculateItemLayout","Math","round","constrainItemLayouts","itemLayouts","layouts","desktop","constrainItemLayout","tablet","mobile","itemLayout","min","getBreakpointFromWidth","breakpoints","sorted","sortBreakpoints","matching","i","length","breakpointName","breakpoint","keys","sort","a","b","collides","bil1","bil2","compact","newLayout","layoutWasChanged","sortedItemLayouts","filter","hasOwnProperty","key","layoutA","layoutB","compareBoardItemLayout","itemWasChanged","test","find","otherItem","moveItem","Error","sourceItem","sourceItemLayout","targetItemLayout","targetItem","newItems","collisions","reverse","collision","collisionLayout","collissionMovedUp","moveCollidingItem","source","collidesWith","collissionMovedDown","screenTypes","addBoardItem","definedScreenTypes","st","constrainedItem","removeBoardItem","deletedItem","hideBoardItem","undefined","showBoardItem"],"mappings":";;;;AAGA,OAAO,SAASA,kBAAT,CAA4BC,KAA5B,EAA+CC,UAA/C,EAAsE;AACzE,SAAOC,MAAM,CAACC,MAAP,CAAcH,KAAd,EACFI,GADE,CACE,UAACC,IAAD,EAAU;AACX,QAAMC,MAAM,GAAGD,IAAI,CAACJ,UAAD,CAAnB;AACA,WAAOK,MAAM,GACPA,MAAM,CAACC,GAAP,GAAaD,MAAM,CAACE,OADb,GAEP,CAFN;AAGH,GANE,EAOFC,MAPE,CAOK,UAACC,GAAD,EAAMC,OAAN;AAAA,WAAkBA,OAAO,GAAGD,GAAV,GAAgBC,OAAhB,GAA0BD,GAA5C;AAAA,GAPL,EAOsD,CAPtD,CAAP;AAQH;AAED,OAAO,SAASE,oBAAT,CAA8BC,IAA9B,EAA4CC,OAA5C,EAA6DC,SAA7D,EAA+E;AAClF,MAAGF,IAAI,IAAI,CAAX,EAAa;AACT,WAAO,CAAP;AACH;;AACD,SAAOA,IAAI,GAAGE,SAAP,GAAmB,CAACF,IAAI,GAAG,CAAR,IAAaC,OAAvC;AACH;AAED,OAAO,SAASE,uBAAT,CACHX,IADG,QAGc;AAAA,MADhBU,SACgB,QADhBA,SACgB;AAAA,MADLE,QACK,QADLA,QACK;AAAA,MADKH,OACL,QADKA,OACL;AACjB,SAAO;AACHI,IAAAA,GAAG,EAAEb,IAAI,CAACE,GAAL,IAAYQ,SAAS,GAAGD,OAAxB,CADF;AAEHK,IAAAA,IAAI,EAAEd,IAAI,CAACe,GAAL,IAAYH,QAAQ,GAAGH,OAAvB,CAFH;AAGHO,IAAAA,MAAM,EAAEhB,IAAI,CAACG,OAAL,GAAeO,SAAf,GAA2B,CAACV,IAAI,CAACG,OAAL,GAAe,CAAhB,IAAqBM,OAHrD;AAIHQ,IAAAA,KAAK,EAAEjB,IAAI,CAACkB,OAAL,GAAeN,QAAf,GAA0B,CAACZ,IAAI,CAACkB,OAAL,GAAe,CAAhB,IAAqBT;AAJnD,GAAP;AAMH;AAED,OAAO,SAASU,mBAAT,CACHnB,IADG,gBAIU;AAAA,MAFZa,GAEY,SAFZA,GAEY;AAAA,MAFPC,IAEO,SAFPA,IAEO;AAAA,MADZJ,SACY,SADZA,SACY;AAAA,MADDE,QACC,SADDA,QACC;AAAA,MADSH,OACT,SADSA,OACT;AACb,2BACOT,IADP;AAEIe,IAAAA,GAAG,EAAEK,IAAI,CAACC,KAAL,CAAWP,IAAI,IAAIF,QAAQ,GAAGH,OAAf,CAAf,CAFT;AAGIP,IAAAA,GAAG,EAAEkB,IAAI,CAACC,KAAL,CAAWR,GAAG,IAAIH,SAAS,GAAGD,OAAhB,CAAd;AAHT;AAKH;;AAMD,SAASa,oBAAT,CAA0FC,WAA1F,EAA4G;AACxG,MAAIC,OAAmB,qBAChBD,WADgB,CAAvB;;AAGA,MAAGC,OAAO,CAACC,OAAX,EAAmB;AACfD,IAAAA,OAAO,CAACC,OAAR,GAAkBC,mBAAmB,CAACF,OAAO,CAACC,OAAT,CAArC;AACH;;AACD,MAAGD,OAAO,CAACG,MAAX,EAAkB;AACdH,IAAAA,OAAO,CAACG,MAAR,GAAiBD,mBAAmB,CAACF,OAAO,CAACG,MAAT,CAApC;AACH;;AACD,MAAGH,OAAO,CAACI,MAAX,EAAkB;AACdJ,IAAAA,OAAO,CAACI,MAAR,GAAiBF,mBAAmB,CAACF,OAAO,CAACI,MAAT,CAApC;AACH;;AACD,SAAOJ,OAAP;AACH;;AAED,SAASE,mBAAT,CAA6BG,UAA7B,EAAyD;AACrD,SAAO;AACHd,IAAAA,GAAG,EAAEK,IAAI,CAACf,GAAL,CAASe,IAAI,CAACU,GAAL,CAASD,UAAU,CAACd,GAApB,EAAyB,EAAzB,CAAT,EAAuC,CAAvC,CADF;AAC6C;AAChDb,IAAAA,GAAG,EAAEkB,IAAI,CAACf,GAAL,CAASwB,UAAU,CAAC3B,GAApB,EAAyB,CAAzB,CAFF;AAGHgB,IAAAA,OAAO,EAAEE,IAAI,CAACf,GAAL,CAASe,IAAI,CAACU,GAAL,CAASD,UAAU,CAACX,OAApB,EAA6B,EAA7B,CAAT,EAA2C,CAA3C,CAHN;AAIHf,IAAAA,OAAO,EAAEiB,IAAI,CAACf,GAAL,CAASwB,UAAU,CAAC1B,OAApB,EAA6B,CAA7B;AAJN,GAAP;AAMH;;AAED,OAAO,SAAS4B,sBAAT,CACHC,WADG,EAEHf,KAFG,EAGM;AACT,MAAMgB,MAAM,GAAGC,eAAe,CAACF,WAAD,CAA9B;AACA,MAAIG,QAAQ,GAAGF,MAAM,CAAC,CAAD,CAArB;;AACA,OAAI,IAAIG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,MAAM,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAsC;AAClC,QAAME,cAAc,GAAGL,MAAM,CAACG,CAAD,CAA7B;AACA,QAAMG,UAAU,GAAGP,WAAW,CAACM,cAAD,CAA9B;AACA,QAAGC,UAAU,IAAItB,KAAK,GAAGsB,UAAzB,EAAqCJ,QAAQ,GAAGG,cAAX;AACxC;;AACD,SAAOH,QAAP;AACH;;AAED,SAASD,eAAT,CAAyBF,WAAzB,EAA0E;AACtE,MAAMQ,IAAI,GAAG3C,MAAM,CAAC2C,IAAP,CAAYR,WAAZ,CAAb;AACA,SAAOQ,IAAI,CAACC,IAAL,CAAU,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAU,CAACX,WAAW,CAACU,CAAD,CAAX,IAAkB,CAAnB,KAAyBV,WAAW,CAACW,CAAD,CAAX,IAAkB,CAA3C,CAAV;AAAA,GAAV,CAAP;AACH;;AAED,SAASC,QAAT,CAAkBC,IAAlB,EAA0CC,IAA1C,EAAiE;AAC7D,MAAG,CAACD,IAAD,IAAS,CAACC,IAAb,EAAmB,OAAO,KAAP;AACnB,MAAGD,IAAI,CAAC9B,GAAL,GAAW8B,IAAI,CAAC3B,OAAhB,IAA2B4B,IAAI,CAAC/B,GAAnC,EAAwC,OAAO,KAAP;AACxC,MAAG8B,IAAI,CAAC9B,GAAL,IAAY+B,IAAI,CAAC/B,GAAL,GAAW+B,IAAI,CAAC5B,OAA/B,EAAwC,OAAO,KAAP;AACxC,MAAG2B,IAAI,CAAC3C,GAAL,GAAW2C,IAAI,CAAC1C,OAAhB,IAA2B2C,IAAI,CAAC5C,GAAnC,EAAwC,OAAO,KAAP;AACxC,MAAG2C,IAAI,CAAC3C,GAAL,IAAY4C,IAAI,CAAC5C,GAAL,GAAW4C,IAAI,CAAC3C,OAA/B,EAAwC,OAAO,KAAP;AACxC,SAAO,IAAP;AACH;;AAED,OAAO,SAAS4C,OAAT,CAAiBpD,KAAjB,EAAoCC,UAApC,EAAuE;AAC1E,MAAIoD,SAAqC,GAAG,EAA5C;AACA,MAAIC,gBAAgB,GAAG,KAAvB;AACA,MAAMC,iBAAiB,GAAGrD,MAAM,CAACC,MAAP,CAAcH,KAAd,EACrBwD,MADqB,CACd,UAAAnD,IAAI;AAAA,WAAIA,IAAI,CAACoD,cAAL,CAAoBxD,UAApB,CAAJ;AAAA,GADU,EAErBG,GAFqB,CAEjB,UAAAC,IAAI;AAAA,WAAK;AAACqD,MAAAA,GAAG,EAAErD,IAAI,CAACqD,GAAX;AAAgBpD,MAAAA,MAAM,EAAED,IAAI,CAACJ,UAAD;AAA5B,KAAL;AAAA,GAFa,EAGrB6C,IAHqB,CAGhB;AAAA,QAAUa,OAAV,SAAErD,MAAF;AAAA,QAA6BsD,OAA7B,SAAqBtD,MAArB;AAAA,WAA0CuD,sBAAsB,CAACF,OAAD,EAAUC,OAAV,CAAhE;AAAA,GAHgB,CAA1B;AAH0E;AAAA;AAAA;;AAAA;AAQ1E,yBAAqCL,iBAArC,8HAAuD;AAAA;AAAA,UAA9CG,IAA8C,SAA9CA,GAA8C;AAAA,UAAjCxB,UAAiC,SAAzC5B,MAAyC;AACnD,UAAIwD,cAAc,GAAG,KAArB;;AADmD;AAG/C,YAAMC,IAAI,qBAAO7B,UAAP;AAAmB3B,UAAAA,GAAG,EAAE2B,UAAU,CAAC3B,GAAX,GAAiB;AAAzC,UAAV;;AACA,YAAGwD,IAAI,CAACxD,GAAL,GAAW,CAAX,IAAgB,CAAC,CAACL,MAAM,CAACC,MAAP,CAAckD,SAAd,EAAyBW,IAAzB,CAA8B,UAAAC,SAAS;AAAA,iBAAIhB,QAAQ,CAACgB,SAAS,CAAChE,UAAD,CAAV,EAAwB8D,IAAxB,CAAZ;AAAA,SAAvC,CAArB,EAAuG;AACnG;AACH;;AACD7B,QAAAA,UAAU,GAAG6B,IAAb;AACAD,QAAAA,cAAc,GAAGR,gBAAgB,GAAG,IAApC;AAR+C;;AAEnD,aAAM,IAAN,EAAW;AAAA;;AAAA,8BAGH;AAIP;;AACDD,MAAAA,SAAS,CAACK,IAAD,CAAT,GAAiBI,cAAc,qBACrB9D,KAAK,CAAC0D,IAAD,CADgB,sBACRzD,UADQ,EACKiC,UADL,KAEzBlC,KAAK,CAAC0D,IAAD,CAFX,CAVmD,CAYlC;AACpB;AArByE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuB1E,SAAOJ,gBAAgB,qBAChBtD,KADgB,EAEhBqD,SAFgB,IAGnBrD,KAHJ;AAIH;;AAED,SAAS6D,sBAAT,CAAgCd,CAAhC,EAAoDC,CAApD,EAAuE;AACnE,MAAGD,CAAC,CAACxC,GAAF,GAAQyC,CAAC,CAACzC,GAAV,IAAkBwC,CAAC,CAACxC,GAAF,KAAUyC,CAAC,CAACzC,GAAZ,IAAmBwC,CAAC,CAAC3B,GAAF,GAAQ4B,CAAC,CAAC5B,GAAlD,EAAuD;AACnD,WAAO,CAAP;AACH,GAFD,MAEM,IAAG2B,CAAC,CAACxC,GAAF,KAAUyC,CAAC,CAACzC,GAAZ,IAAmBwC,CAAC,CAAC3B,GAAF,KAAU4B,CAAC,CAAC5B,GAAlC,EAAsC;AACxC,WAAO,CAAP;AACH;;AACD,SAAO,CAAC,CAAR;AACH;;AAED,OAAO,SAAS8C,QAAT,CACHR,GADG,EAEH1D,KAFG,EAGHoB,GAHG,EAIHb,GAJG,EAKHN,UALG,EAMN;AACG,MAAG,CAACD,KAAK,CAACyD,cAAN,CAAqBC,GAArB,CAAJ,EAA8B;AAC1B,UAAM,IAAIS,KAAJ,CAAU,OAAV,CAAN;AACH;;AAED,MAAMC,UAAU,GAAGpE,KAAK,CAAC0D,GAAD,CAAxB;AACA,MAAMW,gBAAgB,GAAGD,UAAU,CAACnE,UAAD,CAAnC;;AACA,MAAMqE,gBAAgB,qBAAOD,gBAAP;AAAyBjD,IAAAA,GAAG,EAAHA,GAAzB;AAA8Bb,IAAAA,GAAG,EAAHA;AAA9B,IAAtB;;AACA,MAAMgE,UAAU,qBAAOH,UAAP,sBAAoBnE,UAApB,EAAiCqE,gBAAjC,EAAhB;;AAEA,MAAIE,QAAQ,qBAAOxE,KAAP,sBAAeuE,UAAU,CAACb,GAA1B,EAAgCa,UAAhC,EAAZ;;AACA,MAAME,UAAU,GAAGvE,MAAM,CAACC,MAAP,CAAcqE,QAAd,EACdhB,MADc,CACP,UAAAS,SAAS;AAAA,WAAIM,UAAU,CAACb,GAAX,KAAmBO,SAAS,CAACP,GAA7B,IAAoCT,QAAQ,CAACgB,SAAS,CAAChE,UAAD,CAAV,EAAwBqE,gBAAxB,CAAhD;AAAA,GADF,EAEdxB,IAFc,CAET,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUa,sBAAsB,CAACd,CAAC,CAAC9C,UAAD,CAAF,EAAiB+C,CAAC,CAAC/C,UAAD,CAAlB,CAAhC;AAAA,GAFS,EAEyD;AAFzD,GAGdyE,OAHc,EAAnB,CAXH,CAckB;;AAEf,MAAG,CAACD,UAAU,CAAC/B,MAAf,EAAsB;AAClB,WAAO8B,QAAP;AACH;;AAlBJ;AAAA;AAAA;;AAAA;AAAA;AAAA,UAoBaG,SApBb;AAqBO,UAAMC,eAAe,GAAGD,SAAS,CAAC1E,UAAD,CAAjC;;AACA,UAAM4E,iBAAiB,qBAChBF,SADgB,sBAElB1E,UAFkB,oBAGZ2E,eAHY;AAIfrE,QAAAA,GAAG,EAAEkB,IAAI,CAACf,GAAL,CAAS4D,gBAAgB,CAAC/D,GAAjB,GAAuBqE,eAAe,CAACpE,OAAhD,EAAyD,CAAzD;AAJU,UAAvB,CAtBP,CA8BO;;;AACA,UAAG,CAACN,MAAM,CAACC,MAAP,CAAcqE,QAAd,EAAwBR,IAAxB,CAA6B,UAAA3D,IAAI;AAAA,eAAIA,IAAI,CAACqD,GAAL,KAAaiB,SAAS,CAACjB,GAAvB,IAA8BT,QAAQ,CAAC5C,IAAI,CAACJ,UAAD,CAAL,EAAmB4E,iBAAiB,CAAC5E,UAAD,CAApC,CAA1C;AAAA,OAAjC,CAAJ,EAAkI;AAC9HuE,QAAAA,QAAQ,qBAAOA,QAAP,sBAAkBG,SAAS,CAACjB,GAA5B,EAAkCmB,iBAAlC,EAAR;AACH,OAFD,MAEK;AACDL,QAAAA,QAAQ,GAAGM,iBAAiB,CAACP,UAAD,EAAaI,SAAb,EAAwBH,QAAxB,EAAkCvE,UAAlC,CAA5B;AACH;AAnCR;;AAoBG,0BAAuBwE,UAAvB,mIAAkC;AAAA;AAgBjC;AApCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqCG,SAAOD,QAAP;AACH;;AAED,SAASM,iBAAT,CACIC,MADJ,EAEIC,YAFJ,EAGIhF,KAHJ,EAIIC,UAJJ,EAKC;AACG,MAAMgF,mBAAmB,qBAClBD,YADkB,sBAEpB/E,UAFoB,oBAGd+E,YAAY,CAAC/E,UAAD,CAHE;AAIjBM,IAAAA,GAAG,EAAEwE,MAAM,CAAC9E,UAAD,CAAN,CAAoBM,GAApB,GAA0BwE,MAAM,CAAC9E,UAAD,CAAN,CAAoBO;AAJlC,MAAzB;;AAQA,MAAIgE,QAAQ,qBAAOxE,KAAP,sBAAeiF,mBAAmB,CAACvB,GAAnC,EAAyCuB,mBAAzC,EAAZ;;AACA,MAAMR,UAAU,GAAGvE,MAAM,CAACC,MAAP,CAAcqE,QAAd,EACdhB,MADc,CACP,UAAAS,SAAS;AAAA,WAAIA,SAAS,CAACP,GAAV,KAAkBsB,YAAY,CAACtB,GAA/B,IAAsCT,QAAQ,CAACgB,SAAS,CAAChE,UAAD,CAAV,EAAwBgF,mBAAmB,CAAChF,UAAD,CAA3C,CAAlD;AAAA,GADF,CAAnB;;AAGA,MAAG,CAACwE,UAAU,CAAC/B,MAAf,EAAsB;AAClB,WAAO8B,QAAP;AACH;;AAfJ;AAAA;AAAA;;AAAA;AAiBG,0BAAuBC,UAAvB,mIAAkC;AAAA,UAAxBE,SAAwB;AAC9BH,MAAAA,QAAQ,GAAGM,iBAAiB,CAACG,mBAAD,EAAsBN,SAAtB,EAAiCH,QAAjC,EAA2CvE,UAA3C,CAA5B;AACH;AAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBG,SAAOuE,QAAP;AACH;;AAED,IAAMU,WAAyB,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,CAAlC;AAEA;;;;;;AAKA,OAAO,SAASC,YAAT,CACHnF,KADG,EAEHK,IAFG,EAGN;AACG,MAAGL,KAAK,CAACyD,cAAN,CAAqBpD,IAAI,CAACqD,GAA1B,CAAH,EAAkC;AAC9B,UAAM,IAAIS,KAAJ,+CAAiD9D,IAAI,CAACqD,GAAtD,OAAN;AACH;;AAED,MAAM0B,kBAAkB,GAAGF,WAAW,CACjC1B,MADsB,CACf,UAAA6B,EAAE;AAAA,WAAIhF,IAAI,CAACoD,cAAL,CAAoB4B,EAApB,CAAJ;AAAA,GADa,CAA3B;;AAGA,MAAG,CAACD,kBAAkB,CAAC1C,MAAvB,EAA8B;AAC1B,UAAM,IAAIyB,KAAJ,CAAU,kFAAV,CAAN;AACH;;AAED,MAAMmB,eAAe,GAAG3D,oBAAoB,CAACtB,IAAD,CAA5C;;AAEA,MAAImE,QAAQ,qBAAOxE,KAAP,sBAAesF,eAAe,CAAC5B,GAA/B,EAAqC4B,eAArC,EAAZ;;AAdH;AAAA;AAAA;;AAAA;AAAA;AAAA,UAearF,UAfb;AAgBO,UAAMwE,UAAU,GAAGvE,MAAM,CAACC,MAAP,CAAcH,KAAd,EACdwD,MADc,CACP,UAAAS,SAAS;AAAA,eAAIqB,eAAe,CAAC5B,GAAhB,KAAwBO,SAAS,CAACP,GAAlC,IAAyCT,QAAQ,CAACgB,SAAS,CAAChE,UAAD,CAAV,EAAwBqF,eAAe,CAACrF,UAAD,CAAvC,CAArD;AAAA,OADF,CAAnB;;AAGA,UAAG,CAACwE,UAAU,CAAC/B,MAAf,EAAsB;AAClB8B,QAAAA,QAAQ,GAAGpB,OAAO,CAACoB,QAAD,EAAWvE,UAAX,CAAlB;AACA;AACH;;AAtBR;AAAA;AAAA;;AAAA;AAwBO,8BAAuBwE,UAAvB,mIAAkC;AAAA,cAAxBE,SAAwB;AAC9BH,UAAAA,QAAQ,GAAGM,iBAAiB,CAACQ,eAAD,EAAkBX,SAAlB,EAA6BH,QAA7B,EAAuCvE,UAAvC,CAA5B;AACH;AA1BR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA2BOuE,MAAAA,QAAQ,GAAGpB,OAAO,CAACoB,QAAD,EAAWvE,UAAX,CAAlB;AA3BP;;AAeG,0BAAwBmF,kBAAxB,mIAA2C;AAAA;;AAAA,gCAMnC;AAOP;AA5BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA6BG,SAAOZ,QAAP;AACH;AAED,OAAO,SAASe,eAAT,CAAyBvF,KAAzB,EAA4C0D,GAA5C,EAAwD;AAC3D,MAAM8B,WAAW,qBAAOxF,KAAK,CAAC0D,GAAD,CAAZ,CAAjB;;AACA,MAAIc,QAAQ,qBAAOxE,KAAP,CAAZ;;AACA,SAAOwE,QAAQ,CAACd,GAAD,CAAf;;AACA,MAAG8B,WAAW,CAAC1D,OAAf,EAAuB;AACnB0C,IAAAA,QAAQ,GAAGpB,OAAO,CAACoB,QAAD,EAAW,SAAX,CAAlB;AACH;;AACD,MAAGgB,WAAW,CAACxD,MAAf,EAAsB;AAClBwC,IAAAA,QAAQ,GAAGpB,OAAO,CAACoB,QAAD,EAAW,QAAX,CAAlB;AACH;;AACD,MAAGgB,WAAW,CAACvD,MAAf,EAAsB;AAClBuC,IAAAA,QAAQ,GAAGpB,OAAO,CAACoB,QAAD,EAAW,QAAX,CAAlB;AACH;;AACD,SAAOA,QAAP;AACH;AAED,OAAO,SAASiB,aAAT,CAAuBzF,KAAvB,EAA0C0D,GAA1C,EAAuDzD,UAAvD,EAA8E;AACjF,SAAOmD,OAAO,mBACPpD,KADO;AAEV0D,IAAAA,GAAG,oBACI1D,KAAK,CAAC0D,GAAD,CADT,sBAEEzD,UAFF,EAEeyF,SAFf;AAFO,MAMXzF,UANW,CAAd;AAOH;AAED,OAAO,SAAS0F,aAAT,CAAuB3F,KAAvB,EAA0C0D,GAA1C,EAAuDzD,UAAvD,EAA8E;AACjF,QAAM,IAAIkE,KAAJ,CAAU,kBAAV,CAAN,CADiF,CAEjF;AACH","sourcesContent":["import {BoardItems, ScreenType, BoardItemDimensions, BoardItemLayout, BoardDimensions, BoardItem} from './types'\nimport {Breakpoint, BreakpointValues} from '@material-ui/core/styles/createBreakpoints'\n\nexport function calculateBoardRows(items: BoardItems, screenType: ScreenType){\n    return Object.values(items)\n        .map((item) => {\n            const layout = item[screenType]\n            return layout\n                ? layout.row + layout.rowSpan\n                : 0\n        })\n        .reduce((max, bottomY) => bottomY > max ? bottomY : max, 0)\n}\n\nexport function calculateBoardHeight(rows: number, spacing: number, rowHeight: number){\n    if(rows <= 0){\n        return 0\n    }\n    return rows * rowHeight + (rows - 1) * spacing\n}\n\nexport function calculateItemDimensions(\n    item: BoardItemLayout,\n    {rowHeight, colWidth, spacing}: BoardDimensions\n):BoardItemDimensions{\n    return {\n        top: item.row * (rowHeight + spacing),\n        left: item.col * (colWidth + spacing),\n        height: item.rowSpan * rowHeight + (item.rowSpan - 1) * spacing,\n        width: item.colSpan * colWidth + (item.colSpan - 1) * spacing,\n    }\n}\n\nexport function calculateItemLayout(\n    item: BoardItemLayout,\n    {top, left}: Pick<BoardItemDimensions, 'top' | 'left'>,\n    {rowHeight, colWidth, spacing}: BoardDimensions\n):BoardItemLayout{\n    return {\n        ...item,\n        col: Math.round(left / (colWidth + spacing)),\n        row: Math.round(top / (rowHeight + spacing))\n    }\n}\n\ntype Mutable<T> = {\n    -readonly [P in keyof T]: T[P]\n}\n\nfunction constrainItemLayouts<T extends Pick<BoardItem, 'desktop' | 'tablet' | 'mobile'>>(itemLayouts: T): T{\n    let layouts: Mutable<T> = {\n        ...itemLayouts\n    }\n    if(layouts.desktop){\n        layouts.desktop = constrainItemLayout(layouts.desktop!)\n    }\n    if(layouts.tablet){\n        layouts.tablet = constrainItemLayout(layouts.tablet!)\n    }\n    if(layouts.mobile){\n        layouts.mobile = constrainItemLayout(layouts.mobile!)\n    }\n    return layouts\n}\n\nfunction constrainItemLayout(itemLayout: BoardItemLayout){\n    return {\n        col: Math.max(Math.min(itemLayout.col, 10), 0), // 10 because we have 12 columns, from 0 to 11, and an item needs a minimum of 1 width\n        row: Math.max(itemLayout.row, 0),\n        colSpan: Math.max(Math.min(itemLayout.colSpan, 12), 1),\n        rowSpan: Math.max(itemLayout.rowSpan, 1)\n    }\n}\n\nexport function getBreakpointFromWidth(\n    breakpoints: BreakpointValues,\n    width: number\n): Breakpoint{\n    const sorted = sortBreakpoints(breakpoints)\n    let matching = sorted[0]\n    for(let i = 1; i < sorted.length; i++){\n        const breakpointName = sorted[i]\n        const breakpoint = breakpoints[breakpointName]\n        if(breakpoint && width > breakpoint) matching = breakpointName\n    }\n    return matching\n}\n\nfunction sortBreakpoints(breakpoints: BreakpointValues): Array<Breakpoint>{\n    const keys = Object.keys(breakpoints) as Array<Breakpoint>\n    return keys.sort((a, b) => (breakpoints[a] || 0) - (breakpoints[b] || 0))\n}\n\nfunction collides(bil1?: BoardItemLayout, bil2?: BoardItemLayout){\n    if(!bil1 || !bil2) return false\n    if(bil1.col + bil1.colSpan <= bil2.col) return false\n    if(bil1.col >= bil2.col + bil2.colSpan) return false\n    if(bil1.row + bil1.rowSpan <= bil2.row) return false\n    if(bil1.row >= bil2.row + bil2.rowSpan) return false\n    return true\n}\n\nexport function compact(items: BoardItems, screenType: ScreenType): BoardItems{\n    let newLayout: {[key: string]: BoardItem} = {}\n    let layoutWasChanged = false\n    const sortedItemLayouts = Object.values(items)\n        .filter(item => item.hasOwnProperty(screenType))\n        .map(item => ({key: item.key, layout: item[screenType]!}))\n        .sort(({layout: layoutA}, {layout: layoutB}) => compareBoardItemLayout(layoutA, layoutB))\n\n    for(let {key, layout: itemLayout} of sortedItemLayouts){\n        let itemWasChanged = false\n        while(true){\n            const test = {...itemLayout, row: itemLayout.row - 1}\n            if(test.row < 0 || !!Object.values(newLayout).find(otherItem => collides(otherItem[screenType], test))){\n                break\n            }\n            itemLayout = test\n            itemWasChanged = layoutWasChanged = true\n        }\n        newLayout[key] = itemWasChanged\n            ? {...items[key], [screenType]: itemLayout}\n            : items[key] // don't want to duplicate items.\n    }\n\n    return layoutWasChanged ? {\n        ...items, // to populate other items that didn't have the screenType being compacted.\n        ...newLayout\n    } : items\n}\n\nfunction compareBoardItemLayout(a: BoardItemLayout, b: BoardItemLayout){\n    if(a.row > b.row || (a.row === b.row && a.col > b.col)){\n        return 1\n    }else if(a.row === b.row && a.col === b.col){\n        return 0\n    }\n    return -1\n}\n\nexport function moveItem(\n    key: string | number,\n    items: BoardItems,\n    col: number,\n    row: number,\n    screenType: ScreenType\n){\n    if(!items.hasOwnProperty(key)){\n        throw new Error('slutt')\n    }\n\n    const sourceItem = items[key]\n    const sourceItemLayout = sourceItem[screenType]!\n    const targetItemLayout = {...sourceItemLayout, col, row}\n    const targetItem = {...sourceItem, [screenType]: targetItemLayout}\n\n    let newItems = {...items, [targetItem.key]: targetItem}\n    const collisions = Object.values(newItems)\n        .filter(otherItem => targetItem.key !== otherItem.key && collides(otherItem[screenType], targetItemLayout))\n        .sort((a, b) => compareBoardItemLayout(a[screenType]!, b[screenType]!)) // The sort may be importand in case one colliding item must be move to fix a previous colliding item\n        .reverse() // so we move the bottommost item down first\n\n    if(!collisions.length){\n        return newItems\n    }\n\n    for(const collision of collisions){\n        const collisionLayout = collision[screenType]!\n        const collissionMovedUp = {\n            ...collision,\n            [screenType]: {\n                ...collisionLayout,\n                row: Math.max(targetItemLayout.row - collisionLayout.rowSpan, 0)\n            }\n        }\n\n        // Can switch places (move collision above target)\n        if(!Object.values(newItems).find(item => item.key !== collision.key && collides(item[screenType], collissionMovedUp[screenType]))){\n            newItems = {...newItems, [collision.key]: collissionMovedUp}\n        }else{\n            newItems = moveCollidingItem(targetItem, collision, newItems, screenType)\n        }\n    }\n    return newItems\n}\n\nfunction moveCollidingItem(\n    source: BoardItem,\n    collidesWith: BoardItem,\n    items: BoardItems,\n    screenType: ScreenType\n){\n    const collissionMovedDown = {\n        ...collidesWith,\n        [screenType]: {\n            ...collidesWith[screenType],\n            row: source[screenType]!.row + source[screenType]!.rowSpan\n        }\n    }\n\n    let newItems = {...items, [collissionMovedDown.key]: collissionMovedDown}\n    const collisions = Object.values(newItems)\n        .filter(otherItem => otherItem.key !== collidesWith.key && collides(otherItem[screenType], collissionMovedDown[screenType]))\n\n    if(!collisions.length){\n        return newItems\n    }\n\n    for(const collision of collisions){\n        newItems = moveCollidingItem(collissionMovedDown, collision, newItems, screenType)\n    }\n\n    return newItems\n}\n\nconst screenTypes: ScreenType[] = ['mobile', 'tablet', 'desktop']\n\n/**\n * Add a new item to the board\n * @param items Existing items in the board\n * @param item New item to add\n */\nexport function addBoardItem(\n    items: BoardItems,\n    item: BoardItem\n){\n    if(items.hasOwnProperty(item.key)){\n        throw new Error(`Cannot add item with duplicate key '${item.key}'`)\n    }\n\n    const definedScreenTypes = screenTypes\n        .filter(st => item.hasOwnProperty(st))\n\n    if(!definedScreenTypes.length){\n        throw new Error('Cannot add an item with no layout defined for neither mobile, tablet nor desktop')\n    }\n\n    const constrainedItem = constrainItemLayouts(item)\n\n    let newItems = {...items, [constrainedItem.key]: constrainedItem}\n    for(const screenType of definedScreenTypes){\n        const collisions = Object.values(items)\n            .filter(otherItem => constrainedItem.key !== otherItem.key && collides(otherItem[screenType], constrainedItem[screenType]))\n\n        if(!collisions.length){\n            newItems = compact(newItems, screenType)\n            continue\n        }\n\n        for(const collision of collisions){\n            newItems = moveCollidingItem(constrainedItem, collision, newItems, screenType)\n        }\n        newItems = compact(newItems, screenType)\n    }\n    return newItems\n}\n\nexport function removeBoardItem(items: BoardItems, key: string){\n    const deletedItem = {...items[key]}\n    let newItems = {...items} as any\n    delete newItems[key]\n    if(deletedItem.desktop){\n        newItems = compact(newItems, 'desktop')\n    }\n    if(deletedItem.tablet){\n        newItems = compact(newItems, 'tablet')\n    }\n    if(deletedItem.mobile){\n        newItems = compact(newItems, 'mobile')\n    }\n    return newItems as BoardItems\n}\n\nexport function hideBoardItem(items: BoardItems, key: string, screenType: ScreenType){\n    return compact({\n        ...items,\n        key: {\n            ...items[key],\n            [screenType]: undefined\n        }\n    }, screenType)\n}\n\nexport function showBoardItem(items: BoardItems, key: string, screenType: ScreenType){\n    throw new Error('Not implemtented')\n    // resolve collisions\n}"],"file":"utils.js"}