{"version":3,"sources":["../../src/lib/board/Board.tsx"],"names":["React","BoardContainer","calculateBoardHeight","calculateBoardRows","calculateItemDimensions","BoardItemContainer","useWidth","useScreenType","DraggableCore","BoardItemPlaceholder","boardReducer","boardInit","BoardActionType","COLUMNS","useHeight","screenType","items","spacing","rowHeight","bottomRow","useMemo","height","Board","props","locked","onChange","rootRef","useRef","useReducer","state","dispatch","useState","width","setWidth","useEffect","type","RESET_ITEMS","useCallback","newWidth","colWidth","Math","round","boardDimensions","onDragStart","key","DRAG_START","onDrag","_","deltaX","deltaY","DRAGGING","onDragStop","DRAG_STOP","activeDrag","placeholder","Object","values","map","item","layout","containerProps","Component","component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport BoardContainer from './BoardContainer'\nimport {BoardItems, ScreenType, BoardDimensions} from './types'\nimport {calculateBoardHeight, calculateBoardRows, calculateItemDimensions} from './utils'\nimport BoardItemContainer from './BoardItemContainer'\nimport {useWidth} from './useWidth'\nimport useScreenType from './useScreenType'\nimport {DraggableCore, DraggableData, DraggableEvent} from 'react-draggable'\nimport BoardItemPlaceholder from './BoardItemPlaceholder'\nimport {boardReducer, boardInit, BoardActionType} from './boardState'\n\nexport type BoardProps = {\n    locked?: boolean\n    items: BoardItems\n    spacing?: number\n    rowHeight: number\n    onChange?: (items: BoardItems) => void\n    children?: undefined\n}\n\nconst COLUMNS = 12\n\nconst useHeight = (\n    {items, spacing = 0, rowHeight}: Pick<BoardProps, 'items'|'spacing'|'rowHeight'>,\n    screenType: ScreenType\n) => {\n    const bottomRow = React.useMemo(() => calculateBoardRows(items, screenType), [items, screenType])\n    const height = React.useMemo(() => calculateBoardHeight(bottomRow, spacing, rowHeight), [bottomRow, spacing, rowHeight])\n    return height\n}\n\nconst Board = (props: BoardProps) => {\n    const {spacing = 0, rowHeight, locked, onChange} = props\n    const rootRef = React.useRef<HTMLDivElement>(null)\n\n    // State\n    const [state, dispatch] = React.useReducer(boardReducer, props.items, boardInit)\n    const [width, setWidth] = React.useState(1920)\n\n    // Component received new Items\n    React.useEffect(() => dispatch({type: BoardActionType.RESET_ITEMS, items: props.items}), [props.items])\n\n    // Board dimensions\n    useWidth(rootRef, React.useCallback(newWidth => setWidth(newWidth), [setWidth]))\n    const screenType = useScreenType(width)\n    const height = useHeight({items: state.items, spacing: props.spacing, rowHeight: props.rowHeight}, screenType)\n    const colWidth = React.useMemo(() => Math.round((width + spacing) / (COLUMNS)) - spacing, [spacing, width])\n    const boardDimensions = React.useMemo<BoardDimensions>(() => ({rowHeight, colWidth, spacing, width}), [rowHeight, colWidth, spacing, width])\n\n    // Callbacks\n    const onDragStart = React.useCallback((key: React.Key) => {\n        dispatch({type: BoardActionType.DRAG_START, key, boardDimensions, screenType})\n    }, [screenType, boardDimensions])\n\n    const onDrag = React.useCallback((_: DraggableEvent, {deltaX, deltaY}: DraggableData) => {\n        dispatch({type: BoardActionType.DRAGGING, deltaX, deltaY, boardDimensions, screenType})\n    }, [screenType, boardDimensions])\n\n    const onDragStop = React.useCallback(() => {\n        dispatch({type: BoardActionType.DRAG_STOP, boardDimensions, screenType})\n        if(onChange && state.items !== props.items){\n            onChange(state.items)\n        }\n    }, [screenType, boardDimensions, onChange, props.items, state.items])\n\n    const {items, activeDrag, placeholder} = state\n    return (\n        <div ref={rootRef}>\n            <BoardContainer height={height}>\n                {Object.values(items).map(item => {\n                    const layout = item[screenType]\n                    if(!layout){\n                        return null\n                    }\n                    const containerProps = activeDrag && activeDrag.key === item.key\n                        ? activeDrag\n                        : calculateItemDimensions(layout, boardDimensions)\n\n                    const Component = item.component\n                    return locked ? (\n                        <BoardItemContainer {...containerProps} key={item.key}>\n                            <Component screenType={screenType} />\n                        </BoardItemContainer>\n                    ) : (\n                        <DraggableCore\n                            key={item.key}\n                            onStart={() => onDragStart(item.key)}\n                            onDrag={onDrag}\n                            onStop={onDragStop}\n                        >\n                            <BoardItemContainer {...containerProps}>\n                                <Component screenType={screenType} />\n                            </BoardItemContainer>\n                        </DraggableCore>\n                    )\n                })}\n                {placeholder && <BoardItemPlaceholder {...placeholder} />}\n            </BoardContainer>\n        </div>\n    )\n}\n\nBoard.propTypes = {\n    items: PropTypes.object.isRequired, // Maybe todo: more specific checking?\n    locked: PropTypes.bool,\n    onChange: PropTypes.func,\n    rowHeight: PropTypes.number.isRequired,\n    spacing: PropTypes.number,\n}\n\nexport default Board"],"file":"Board.js"}